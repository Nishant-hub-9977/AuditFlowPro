{"file_contents":{"client/src/App.tsx":{"content":"import { Switch, Route, useLocation, Redirect } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/AppSidebar\";\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\nimport { AuthProvider, useAuth } from \"@/lib/authContext\";\nimport { RoleGuard } from \"@/components/RoleGuard\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Audits from \"@/pages/Audits\";\nimport Leads from \"@/pages/Leads\";\nimport Reports from \"@/pages/Reports\";\nimport MasterData from \"@/pages/MasterData\";\nimport Login from \"@/pages/Login\";\nimport Register from \"@/pages/Register\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction AppLayout({ children }: { children: React.ReactNode }) {\n  const [location] = useLocation();\n\n  // Don't show sidebar/header for login/register pages\n  if (location === \"/login\" || location === \"/register\") {\n    return <>{children}</>;\n  }\n\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar />\n        <div className=\"flex flex-col flex-1\">\n          <header className=\"flex items-center justify-between px-6 py-3 border-b border-border sticky top-0 bg-background z-10\">\n            <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n            <ThemeToggle />\n          </header>\n          <main className=\"flex-1 overflow-auto p-6\">\n            {children}\n          </main>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}\n\nfunction PrivateRoute({ component: Component, children }: { component?: React.ComponentType; children?: React.ReactNode }) {\n  const { user, isLoading } = useAuth();\n  \n  if (isLoading) {\n    return <div className=\"flex items-center justify-center min-h-screen\">Loading...</div>;\n  }\n  \n  if (!user) {\n    return <Redirect to=\"/login\" />;\n  }\n  \n  return Component ? <Component /> : <>{children}</>;\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/register\" component={Register} />\n      <Route path=\"/\">\n        <PrivateRoute component={Dashboard} />\n      </Route>\n      <Route path=\"/audits\">\n        <PrivateRoute>\n          <RoleGuard allowedRoles={[\"auditor\", \"client\", \"admin\", \"master_admin\"]}>\n            <Audits />\n          </RoleGuard>\n        </PrivateRoute>\n      </Route>\n      <Route path=\"/leads\">\n        <PrivateRoute>\n          <RoleGuard allowedRoles={[\"client\", \"admin\", \"master_admin\"]}>\n            <Leads />\n          </RoleGuard>\n        </PrivateRoute>\n      </Route>\n      <Route path=\"/reports\">\n        <PrivateRoute>\n          <RoleGuard allowedRoles={[\"admin\", \"master_admin\"]}>\n            <Reports />\n          </RoleGuard>\n        </PrivateRoute>\n      </Route>\n      <Route path=\"/master-data\">\n        <PrivateRoute>\n          <RoleGuard allowedRoles={[\"admin\", \"master_admin\"]}>\n            <MasterData />\n          </RoleGuard>\n        </PrivateRoute>\n      </Route>\n      <Route path=\"/settings\">\n        <PrivateRoute>\n          <RoleGuard allowedRoles={[\"admin\", \"master_admin\"]}>\n            <MasterData />\n          </RoleGuard>\n        </PrivateRoute>\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <AppLayout>\n            <Router />\n          </AppLayout>\n          <Toaster />\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":3873},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 min-h-11 md:min-h-auto text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1906},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/pages/MasterData.tsx":{"content":"import { useState } from \"react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus, Trash2 } from \"lucide-react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport type { Industry, AuditType, User, InsertUser, InsertIndustry, InsertAuditType, UserRole } from \"@shared/schema\";\nimport { insertUserSchema, insertIndustrySchema, insertAuditTypeSchema, userRoles } from \"@shared/schema\";\nimport { format } from \"date-fns\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/lib/authContext\";\n\nexport default function MasterData() {\n  const { toast } = useToast();\n  const { user: currentUser } = useAuth();\n  const [userDialogOpen, setUserDialogOpen] = useState(false);\n  const [industryDialogOpen, setIndustryDialogOpen] = useState(false);\n  const [auditTypeDialogOpen, setAuditTypeDialogOpen] = useState(false);\n  const [editingUser, setEditingUser] = useState<User | null>(null);\n  const [editingIndustry, setEditingIndustry] = useState<Industry | null>(null);\n  const [editingAuditType, setEditingAuditType] = useState<AuditType | null>(null);\n\n  const { data: users = [], isLoading: usersLoading } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  const { data: industries = [], isLoading: industriesLoading } = useQuery<Industry[]>({\n    queryKey: [\"/api/industries\"],\n  });\n\n  const { data: auditTypes = [], isLoading: auditTypesLoading } = useQuery<AuditType[]>({\n    queryKey: [\"/api/audit-types\"],\n  });\n\n  // User form\n  const userFormSchema = editingUser \n    ? insertUserSchema.extend({ password: z.string().optional() }).omit({ tenantId: true })\n    : insertUserSchema.omit({ tenantId: true });\n\n  const userForm = useForm<z.infer<typeof userFormSchema>>({\n    resolver: zodResolver(userFormSchema),\n    defaultValues: editingUser ? {\n      ...editingUser,\n      password: undefined,\n      role: editingUser.role as UserRole\n    } : {\n      username: \"\",\n      password: \"\",\n      fullName: \"\",\n      email: \"\",\n      role: \"auditor\" as UserRole,\n      isActive: true,\n    },\n  });\n\n  const createUserMutation = useMutation({\n    mutationFn: async (data: InsertUser) => {\n      const res = await apiRequest(\"POST\", \"/api/users\", data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({ title: \"User created successfully\" });\n      setUserDialogOpen(false);\n      userForm.reset();\n    },\n    onError: () => {\n      toast({ title: \"Failed to create user\", variant: \"destructive\" });\n    },\n  });\n\n  const updateUserMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertUser> }) => {\n      const res = await apiRequest(\"PUT\", `/api/users/${id}`, data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({ title: \"User updated successfully\" });\n      setUserDialogOpen(false);\n      setEditingUser(null);\n      userForm.reset();\n    },\n    onError: () => {\n      toast({ title: \"Failed to update user\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/users/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({ title: \"User deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete user\", variant: \"destructive\" });\n    },\n  });\n\n  // Industry form\n  const industryForm = useForm<z.infer<typeof insertIndustrySchema>>({\n    resolver: zodResolver(insertIndustrySchema.omit({ tenantId: true })),\n    defaultValues: editingIndustry ? { ...editingIndustry, description: editingIndustry.description || \"\" } : {\n      name: \"\",\n      description: \"\",\n    },\n  });\n\n  const createIndustryMutation = useMutation({\n    mutationFn: async (data: InsertIndustry) => {\n      const res = await apiRequest(\"POST\", \"/api/industries\", data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/industries\"] });\n      toast({ title: \"Industry created successfully\" });\n      setIndustryDialogOpen(false);\n      industryForm.reset();\n    },\n    onError: () => {\n      toast({ title: \"Failed to create industry\", variant: \"destructive\" });\n    },\n  });\n\n  const updateIndustryMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertIndustry> }) => {\n      const res = await apiRequest(\"PUT\", `/api/industries/${id}`, data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/industries\"] });\n      toast({ title: \"Industry updated successfully\" });\n      setIndustryDialogOpen(false);\n      setEditingIndustry(null);\n      industryForm.reset();\n    },\n    onError: () => {\n      toast({ title: \"Failed to update industry\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteIndustryMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/industries/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/industries\"] });\n      toast({ title: \"Industry deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete industry\", variant: \"destructive\" });\n    },\n  });\n\n  // Audit Type form\n  const auditTypeForm = useForm<z.infer<typeof insertAuditTypeSchema>>({\n    resolver: zodResolver(insertAuditTypeSchema.omit({ tenantId: true })),\n    defaultValues: editingAuditType ? { ...editingAuditType, description: editingAuditType.description || \"\" } : {\n      name: \"\",\n      description: \"\",\n    },\n  });\n\n  const createAuditTypeMutation = useMutation({\n    mutationFn: async (data: InsertAuditType) => {\n      const res = await apiRequest(\"POST\", \"/api/audit-types\", data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/audit-types\"] });\n      toast({ title: \"Audit type created successfully\" });\n      setAuditTypeDialogOpen(false);\n      auditTypeForm.reset();\n    },\n    onError: () => {\n      toast({ title: \"Failed to create audit type\", variant: \"destructive\" });\n    },\n  });\n\n  const updateAuditTypeMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertAuditType> }) => {\n      const res = await apiRequest(\"PUT\", `/api/audit-types/${id}`, data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/audit-types\"] });\n      toast({ title: \"Audit type updated successfully\" });\n      setAuditTypeDialogOpen(false);\n      setEditingAuditType(null);\n      auditTypeForm.reset();\n    },\n    onError: () => {\n      toast({ title: \"Failed to update audit type\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteAuditTypeMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/audit-types/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/audit-types\"] });\n      toast({ title: \"Audit type deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete audit type\", variant: \"destructive\" });\n    },\n  });\n\n  const handleUserSubmit = (data: z.infer<typeof userFormSchema>) => {\n    if (editingUser) {\n      updateUserMutation.mutate({ id: editingUser.id, data: data as Partial<InsertUser> });\n    } else {\n      createUserMutation.mutate(data as InsertUser);\n    }\n  };\n\n  const handleIndustrySubmit = (data: z.infer<typeof insertIndustrySchema>) => {\n    if (editingIndustry) {\n      updateIndustryMutation.mutate({ id: editingIndustry.id, data: data as Partial<InsertIndustry> });\n    } else {\n      createIndustryMutation.mutate(data as InsertIndustry);\n    }\n  };\n\n  const handleAuditTypeSubmit = (data: z.infer<typeof insertAuditTypeSchema>) => {\n    if (editingAuditType) {\n      updateAuditTypeMutation.mutate({ id: editingAuditType.id, data: data as Partial<InsertAuditType> });\n    } else {\n      createAuditTypeMutation.mutate(data as InsertAuditType);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-semibold\" data-testid=\"heading-master-data\">\n          Master Data Configuration\n        </h1>\n        <p className=\"text-muted-foreground mt-1\">\n          Manage users, industry types, audit types, and system configurations\n        </p>\n      </div>\n\n      <Tabs defaultValue=\"users\">\n        <TabsList>\n          <TabsTrigger value=\"users\" data-testid=\"tab-users\">Users</TabsTrigger>\n          <TabsTrigger value=\"industry\" data-testid=\"tab-industry\">Industry Types</TabsTrigger>\n          <TabsTrigger value=\"audit-types\" data-testid=\"tab-audit-types\">Audit Types</TabsTrigger>\n        </TabsList>\n\n        {/* Users Tab */}\n        <TabsContent value=\"users\" className=\"space-y-4\">\n          <div className=\"flex justify-end\">\n            <Button \n              data-testid=\"button-add-user\"\n              onClick={() => {\n                setEditingUser(null);\n                userForm.reset({ username: \"\", password: \"\", fullName: \"\", email: \"\", role: \"auditor\" as UserRole, isActive: true });\n                setUserDialogOpen(true);\n              }}\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add User\n            </Button>\n          </div>\n\n          {usersLoading ? (\n            <div className=\"flex items-center justify-center py-12\">\n              <p className=\"text-muted-foreground\">Loading users...</p>\n            </div>\n          ) : users.length === 0 ? (\n            <div className=\"flex flex-col items-center justify-center py-12 text-center\">\n              <p className=\"text-muted-foreground\">No users found</p>\n              <p className=\"text-sm text-muted-foreground mt-1\">Add your first user to get started</p>\n            </div>\n          ) : (\n            <>\n              {/* Mobile Card View */}\n              <div className=\"md:hidden space-y-3\">\n                {users.map((user) => (\n                  <Card key={user.id} data-testid={`card-user-${user.id}`} className=\"hover-elevate\">\n                    <CardContent className=\"p-4 space-y-3\">\n                      <div className=\"flex items-start justify-between gap-3\">\n                        <div className=\"flex-1 min-w-0\">\n                          <p className=\"text-lg font-semibold\" data-testid={`text-name-${user.id}`}>{user.fullName}</p>\n                          <p className=\"text-sm text-muted-foreground mt-0.5\" data-testid={`text-email-${user.id}`}>{user.email}</p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between pt-2 border-t gap-2\">\n                        <Badge variant=\"outline\" data-testid={`badge-role-${user.id}`}>\n                          {user.role.charAt(0).toUpperCase() + user.role.slice(1)}\n                        </Badge>\n                        <div className=\"flex gap-2\">\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\" \n                            data-testid={`button-edit-user-${user.id}`}\n                            onClick={() => {\n                              setEditingUser(user);\n                              userForm.reset({ ...user, password: undefined, role: user.role as UserRole });\n                              setUserDialogOpen(true);\n                            }}\n                          >\n                            Edit\n                          </Button>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"icon\" \n                            data-testid={`button-delete-user-${user.id}`}\n                            onClick={() => deleteUserMutation.mutate(user.id)}\n                            disabled={user.id === currentUser?.id}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n\n              {/* Desktop Table View */}\n              <div className=\"hidden md:block overflow-x-auto\" style={{ WebkitOverflowScrolling: 'touch' }}>\n                <div className=\"rounded-lg border min-w-[700px]\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Name</TableHead>\n                        <TableHead>Email</TableHead>\n                        <TableHead>Username</TableHead>\n                        <TableHead>Role</TableHead>\n                        <TableHead>Created</TableHead>\n                        <TableHead className=\"text-right\">Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {users.map((user) => (\n                        <TableRow key={user.id} data-testid={`row-user-${user.id}`}>\n                          <TableCell className=\"font-medium\">{user.fullName}</TableCell>\n                          <TableCell className=\"text-muted-foreground\">{user.email}</TableCell>\n                          <TableCell className=\"font-mono text-sm\">{user.username}</TableCell>\n                          <TableCell>\n                            <Badge variant=\"outline\">\n                              {user.role.charAt(0).toUpperCase() + user.role.slice(1)}\n                            </Badge>\n                          </TableCell>\n                          <TableCell className=\"text-muted-foreground\">\n                            {format(new Date(user.createdAt), \"MMM dd, yyyy\")}\n                          </TableCell>\n                          <TableCell className=\"text-right\">\n                            <div className=\"flex justify-end gap-2\">\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\" \n                                data-testid={`button-edit-user-${user.id}`}\n                                onClick={() => {\n                                  setEditingUser(user);\n                                  userForm.reset({ ...user, password: undefined, role: user.role as UserRole });\n                                  setUserDialogOpen(true);\n                                }}\n                              >\n                                Edit\n                              </Button>\n                              <Button \n                                variant=\"ghost\" \n                                size=\"icon\" \n                                data-testid={`button-delete-user-${user.id}`}\n                                onClick={() => deleteUserMutation.mutate(user.id)}\n                                disabled={user.id === currentUser?.id}\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              </div>\n            </>\n          )}\n        </TabsContent>\n\n        {/* Industries Tab */}\n        <TabsContent value=\"industry\" className=\"space-y-4\">\n          <div className=\"flex justify-end\">\n            <Button \n              data-testid=\"button-add-industry\"\n              onClick={() => {\n                setEditingIndustry(null);\n                industryForm.reset({ name: \"\", description: \"\" });\n                setIndustryDialogOpen(true);\n              }}\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Industry Type\n            </Button>\n          </div>\n\n          {industriesLoading ? (\n            <div className=\"flex items-center justify-center py-12\">\n              <p className=\"text-muted-foreground\">Loading industries...</p>\n            </div>\n          ) : industries.length === 0 ? (\n            <div className=\"flex flex-col items-center justify-center py-12 text-center\">\n              <p className=\"text-muted-foreground\">No industries found</p>\n              <p className=\"text-sm text-muted-foreground mt-1\">Add your first industry to get started</p>\n            </div>\n          ) : (\n            <>\n              {/* Mobile Card View */}\n              <div className=\"md:hidden space-y-3\">\n                {industries.map((industry) => (\n                  <Card key={industry.id} data-testid={`card-industry-${industry.id}`} className=\"hover-elevate\">\n                    <CardContent className=\"p-4 space-y-3\">\n                      <div className=\"flex items-start justify-between gap-3\">\n                        <div className=\"flex-1 min-w-0\">\n                          <p className=\"text-lg font-semibold\" data-testid={`text-name-${industry.id}`}>{industry.name}</p>\n                          {industry.description && (\n                            <p className=\"text-sm text-muted-foreground mt-0.5\" data-testid={`text-description-${industry.id}`}>\n                              {industry.description}\n                            </p>\n                          )}\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between pt-2 border-t gap-2\">\n                        <p className=\"text-sm text-muted-foreground\">\n                          Added {format(new Date(industry.createdAt), \"MMM dd, yyyy\")}\n                        </p>\n                        <div className=\"flex gap-2\">\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\" \n                            data-testid={`button-edit-industry-${industry.id}`}\n                            onClick={() => {\n                              setEditingIndustry(industry);\n                              industryForm.reset({ ...industry, description: industry.description || \"\" });\n                              setIndustryDialogOpen(true);\n                            }}\n                          >\n                            Edit\n                          </Button>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"icon\" \n                            data-testid={`button-delete-industry-${industry.id}`}\n                            onClick={() => deleteIndustryMutation.mutate(industry.id)}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n\n              {/* Desktop Table View */}\n              <div className=\"hidden md:block overflow-x-auto\" style={{ WebkitOverflowScrolling: 'touch' }}>\n                <div className=\"rounded-lg border min-w-[700px]\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Name</TableHead>\n                        <TableHead>Description</TableHead>\n                        <TableHead>Created</TableHead>\n                        <TableHead className=\"text-right\">Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {industries.map((industry) => (\n                        <TableRow key={industry.id} data-testid={`row-industry-${industry.id}`}>\n                          <TableCell className=\"font-medium\">{industry.name}</TableCell>\n                          <TableCell className=\"text-muted-foreground\">{industry.description || \"—\"}</TableCell>\n                          <TableCell className=\"text-muted-foreground\">\n                            {format(new Date(industry.createdAt), \"MMM dd, yyyy\")}\n                          </TableCell>\n                          <TableCell className=\"text-right\">\n                            <div className=\"flex justify-end gap-2\">\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\" \n                                data-testid={`button-edit-industry-${industry.id}`}\n                                onClick={() => {\n                                  setEditingIndustry(industry);\n                                  industryForm.reset({ ...industry, description: industry.description || \"\" });\n                                  setIndustryDialogOpen(true);\n                                }}\n                              >\n                                Edit\n                              </Button>\n                              <Button \n                                variant=\"ghost\" \n                                size=\"icon\" \n                                data-testid={`button-delete-industry-${industry.id}`}\n                                onClick={() => deleteIndustryMutation.mutate(industry.id)}\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              </div>\n            </>\n          )}\n        </TabsContent>\n\n        {/* Audit Types Tab */}\n        <TabsContent value=\"audit-types\" className=\"space-y-4\">\n          <div className=\"flex justify-end\">\n            <Button \n              data-testid=\"button-add-audit-type\"\n              onClick={() => {\n                setEditingAuditType(null);\n                auditTypeForm.reset({ name: \"\", description: \"\" });\n                setAuditTypeDialogOpen(true);\n              }}\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Audit Type\n            </Button>\n          </div>\n\n          {auditTypesLoading ? (\n            <div className=\"flex items-center justify-center py-12\">\n              <p className=\"text-muted-foreground\">Loading audit types...</p>\n            </div>\n          ) : auditTypes.length === 0 ? (\n            <div className=\"flex flex-col items-center justify-center py-12 text-center\">\n              <p className=\"text-muted-foreground\">No audit types found</p>\n              <p className=\"text-sm text-muted-foreground mt-1\">Add your first audit type to get started</p>\n            </div>\n          ) : (\n            <>\n              {/* Mobile Card View */}\n              <div className=\"md:hidden space-y-3\">\n                {auditTypes.map((auditType) => (\n                  <Card key={auditType.id} data-testid={`card-audit-type-${auditType.id}`} className=\"hover-elevate\">\n                    <CardContent className=\"p-4 space-y-3\">\n                      <div className=\"flex items-start justify-between gap-3\">\n                        <div className=\"flex-1 min-w-0\">\n                          <p className=\"text-lg font-semibold\" data-testid={`text-name-${auditType.id}`}>{auditType.name}</p>\n                          {auditType.description && (\n                            <p className=\"text-sm text-muted-foreground mt-0.5\" data-testid={`text-description-${auditType.id}`}>\n                              {auditType.description}\n                            </p>\n                          )}\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between pt-2 border-t gap-2\">\n                        <p className=\"text-sm text-muted-foreground\">\n                          Added {format(new Date(auditType.createdAt), \"MMM dd, yyyy\")}\n                        </p>\n                        <div className=\"flex gap-2\">\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\" \n                            data-testid={`button-edit-audit-type-${auditType.id}`}\n                            onClick={() => {\n                              setEditingAuditType(auditType);\n                              auditTypeForm.reset({ ...auditType, description: auditType.description || \"\" });\n                              setAuditTypeDialogOpen(true);\n                            }}\n                          >\n                            Edit\n                          </Button>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"icon\" \n                            data-testid={`button-delete-audit-type-${auditType.id}`}\n                            onClick={() => deleteAuditTypeMutation.mutate(auditType.id)}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n\n              {/* Desktop Table View */}\n              <div className=\"hidden md:block overflow-x-auto\" style={{ WebkitOverflowScrolling: 'touch' }}>\n                <div className=\"rounded-lg border min-w-[700px]\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Name</TableHead>\n                        <TableHead>Description</TableHead>\n                        <TableHead>Created</TableHead>\n                        <TableHead className=\"text-right\">Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {auditTypes.map((auditType) => (\n                        <TableRow key={auditType.id} data-testid={`row-audit-type-${auditType.id}`}>\n                          <TableCell className=\"font-medium\">{auditType.name}</TableCell>\n                          <TableCell className=\"text-muted-foreground\">{auditType.description || \"—\"}</TableCell>\n                          <TableCell className=\"text-muted-foreground\">\n                            {format(new Date(auditType.createdAt), \"MMM dd, yyyy\")}\n                          </TableCell>\n                          <TableCell className=\"text-right\">\n                            <div className=\"flex justify-end gap-2\">\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\" \n                                data-testid={`button-edit-audit-type-${auditType.id}`}\n                                onClick={() => {\n                                  setEditingAuditType(auditType);\n                                  auditTypeForm.reset({ ...auditType, description: auditType.description || \"\" });\n                                  setAuditTypeDialogOpen(true);\n                                }}\n                              >\n                                Edit\n                              </Button>\n                              <Button \n                                variant=\"ghost\" \n                                size=\"icon\" \n                                data-testid={`button-delete-audit-type-${auditType.id}`}\n                                onClick={() => deleteAuditTypeMutation.mutate(auditType.id)}\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              </div>\n            </>\n          )}\n        </TabsContent>\n      </Tabs>\n\n      {/* User Dialog */}\n      <Dialog open={userDialogOpen} onOpenChange={setUserDialogOpen}>\n        <DialogContent data-testid=\"dialog-user-form\">\n          <DialogHeader>\n            <DialogTitle>{editingUser ? \"Edit User\" : \"Create New User\"}</DialogTitle>\n            <DialogDescription>\n              {editingUser ? \"Update user information below\" : \"Add a new user to the system\"}\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...userForm}>\n            <form onSubmit={userForm.handleSubmit(handleUserSubmit)} className=\"space-y-4\">\n              <FormField\n                control={userForm.control}\n                name=\"fullName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Full Name</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-user-fullname\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={userForm.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Username</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-user-username\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={userForm.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input {...field} type=\"email\" data-testid=\"input-user-email\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={userForm.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>{editingUser ? \"Password (leave blank to keep current)\" : \"Password\"}</FormLabel>\n                    <FormControl>\n                      <Input {...field} type=\"password\" data-testid=\"input-user-password\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={userForm.control}\n                name=\"role\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Role</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-user-role\">\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"master_admin\">Master Admin</SelectItem>\n                        <SelectItem value=\"admin\">Admin</SelectItem>\n                        <SelectItem value=\"client\">Client</SelectItem>\n                        <SelectItem value=\"auditor\">Auditor</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <DialogFooter>\n                <Button type=\"button\" variant=\"outline\" onClick={() => setUserDialogOpen(false)}>\n                  Cancel\n                </Button>\n                <Button type=\"submit\" data-testid=\"button-save-user\" disabled={createUserMutation.isPending || updateUserMutation.isPending}>\n                  {editingUser ? \"Update\" : \"Create\"}\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Industry Dialog */}\n      <Dialog open={industryDialogOpen} onOpenChange={setIndustryDialogOpen}>\n        <DialogContent data-testid=\"dialog-industry-form\">\n          <DialogHeader>\n            <DialogTitle>{editingIndustry ? \"Edit Industry\" : \"Create New Industry\"}</DialogTitle>\n            <DialogDescription>\n              {editingIndustry ? \"Update industry information below\" : \"Add a new industry type\"}\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...industryForm}>\n            <form onSubmit={industryForm.handleSubmit(handleIndustrySubmit)} className=\"space-y-4\">\n              <FormField\n                control={industryForm.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Name</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-industry-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={industryForm.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea {...field} value={field.value || \"\"} data-testid=\"input-industry-description\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <DialogFooter>\n                <Button type=\"button\" variant=\"outline\" onClick={() => setIndustryDialogOpen(false)}>\n                  Cancel\n                </Button>\n                <Button type=\"submit\" data-testid=\"button-save-industry\" disabled={createIndustryMutation.isPending || updateIndustryMutation.isPending}>\n                  {editingIndustry ? \"Update\" : \"Create\"}\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Audit Type Dialog */}\n      <Dialog open={auditTypeDialogOpen} onOpenChange={setAuditTypeDialogOpen}>\n        <DialogContent data-testid=\"dialog-audit-type-form\">\n          <DialogHeader>\n            <DialogTitle>{editingAuditType ? \"Edit Audit Type\" : \"Create New Audit Type\"}</DialogTitle>\n            <DialogDescription>\n              {editingAuditType ? \"Update audit type information below\" : \"Add a new audit type\"}\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...auditTypeForm}>\n            <form onSubmit={auditTypeForm.handleSubmit(handleAuditTypeSubmit)} className=\"space-y-4\">\n              <FormField\n                control={auditTypeForm.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Name</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-audit-type-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={auditTypeForm.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea {...field} value={field.value || \"\"} data-testid=\"input-audit-type-description\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <DialogFooter>\n                <Button type=\"button\" variant=\"outline\" onClick={() => setAuditTypeDialogOpen(false)}>\n                  Cancel\n                </Button>\n                <Button type=\"submit\" data-testid=\"button-save-audit-type\" disabled={createAuditTypeMutation.isPending || updateAuditTypeMutation.isPending}>\n                  {editingAuditType ? \"Update\" : \"Create\"}\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":37479},"client/src/pages/examples/Audits.tsx":{"content":"import Audits from \"../Audits\";\n\nexport default function AuditsExample() {\n  return (\n    <div className=\"p-6\">\n      <Audits />\n    </div>\n  );\n}\n","size_bytes":147},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-11 w-11 md:h-5 md:w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1093},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-11 w-11 md:h-8 md:w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-11 w-11 md:h-8 md:w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6241},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/LeadKanban.tsx":{"content":"import { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { MoreVertical, User } from \"lucide-react\";\n\n//todo: remove mock functionality\nconst columns = [\n  {\n    id: \"open\",\n    title: \"Open\",\n    leads: [\n      {\n        id: \"LEAD-001\",\n        company: \"TechCorp Industries\",\n        contact: \"John Doe\",\n        priority: \"High\",\n        value: \"$45,000\",\n      },\n      {\n        id: \"LEAD-002\",\n        company: \"Global Pharma\",\n        contact: \"Jane Smith\",\n        priority: \"Medium\",\n        value: \"$32,000\",\n      },\n    ],\n  },\n  {\n    id: \"in-progress\",\n    title: \"In Progress\",\n    leads: [\n      {\n        id: \"LEAD-003\",\n        company: \"ChemSafe Ltd\",\n        contact: \"Mike Johnson\",\n        priority: \"High\",\n        value: \"$58,000\",\n      },\n    ],\n  },\n  {\n    id: \"converted\",\n    title: \"Converted\",\n    leads: [\n      {\n        id: \"LEAD-004\",\n        company: \"BioMed Corp\",\n        contact: \"Sarah Williams\",\n        priority: \"High\",\n        value: \"$75,000\",\n      },\n    ],\n  },\n  {\n    id: \"rejected\",\n    title: \"Rejected\",\n    leads: [],\n  },\n];\n\nconst priorityColors: Record<string, \"default\" | \"secondary\" | \"destructive\"> = {\n  High: \"destructive\",\n  Medium: \"secondary\",\n  Low: \"default\",\n};\n\nexport function LeadKanban() {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n      {columns.map((column) => (\n        <div key={column.id} className=\"space-y-3\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"font-semibold text-sm\">{column.title}</h3>\n            <Badge variant=\"outline\">{column.leads.length}</Badge>\n          </div>\n          <div className=\"space-y-2\">\n            {column.leads.map((lead) => (\n              <Card\n                key={lead.id}\n                className=\"hover-elevate cursor-pointer\"\n                data-testid={`lead-card-${lead.id}`}\n              >\n                <CardHeader className=\"p-4 pb-3\">\n                  <div className=\"flex items-start justify-between gap-2\">\n                    <div className=\"space-y-1 flex-1\">\n                      <p className=\"font-medium text-sm\">{lead.company}</p>\n                      <p className=\"text-xs font-mono text-muted-foreground\">{lead.id}</p>\n                    </div>\n                    <Button variant=\"ghost\" size=\"icon\" className=\"h-6 w-6\">\n                      <MoreVertical className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"p-4 pt-0 space-y-2\">\n                  <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                    <User className=\"h-3 w-3\" />\n                    <span>{lead.contact}</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <Badge variant={priorityColors[lead.priority]}>{lead.priority}</Badge>\n                    <span className=\"font-semibold text-sm\">{lead.value}</span>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n            {column.leads.length === 0 && (\n              <div className=\"rounded-lg border-2 border-dashed border-muted p-6 text-center\">\n                <p className=\"text-sm text-muted-foreground\">No leads</p>\n              </div>\n            )}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n","size_bytes":3534},"client/src/components/AppSidebar.tsx":{"content":"import {\n  LayoutDashboard,\n  ClipboardCheck,\n  Users,\n  FolderOpen,\n  Settings,\n  BarChart3,\n  Building2,\n  LogOut,\n} from \"lucide-react\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarHeader,\n  SidebarFooter,\n} from \"@/components/ui/sidebar\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/lib/authContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { UserRole } from \"@shared/schema\";\n\ninterface NavItem {\n  title: string;\n  url: string;\n  icon: any;\n  allowedRoles: UserRole[];\n}\n\nconst navItems: NavItem[] = [\n  {\n    title: \"Dashboard\",\n    url: \"/\",\n    icon: LayoutDashboard,\n    allowedRoles: [\"master_admin\", \"admin\", \"client\", \"auditor\"],\n  },\n  {\n    title: \"Audits\",\n    url: \"/audits\",\n    icon: ClipboardCheck,\n    allowedRoles: [\"master_admin\", \"admin\", \"client\", \"auditor\"],\n  },\n  {\n    title: \"Leads\",\n    url: \"/leads\",\n    icon: Users,\n    allowedRoles: [\"master_admin\", \"admin\", \"client\"],\n  },\n  {\n    title: \"Reports\",\n    url: \"/reports\",\n    icon: BarChart3,\n    allowedRoles: [\"master_admin\", \"admin\"],\n  },\n  {\n    title: \"Master Data\",\n    url: \"/master-data\",\n    icon: FolderOpen,\n    allowedRoles: [\"master_admin\", \"admin\"],\n  },\n  {\n    title: \"Settings\",\n    url: \"/settings\",\n    icon: Settings,\n    allowedRoles: [\"master_admin\", \"admin\"],\n  },\n];\n\nexport function AppSidebar() {\n  const [location, setLocation] = useLocation();\n  const { logout, user } = useAuth();\n  \n  // Filter nav items based on user role\n  const visibleItems = navItems.filter(item => \n    user && item.allowedRoles.includes(user.role as UserRole)\n  );\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n      setLocation(\"/login\");\n    } catch (error) {\n      console.error(\"Logout failed:\", error);\n      // Still redirect to login even if API call fails\n      setLocation(\"/login\");\n    }\n  };\n\n  return (\n    <Sidebar>\n      <SidebarHeader className=\"p-4 border-b border-sidebar-border\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"h-8 w-8 rounded-lg bg-primary flex items-center justify-center\">\n            <Building2 className=\"h-5 w-5 text-primary-foreground\" />\n          </div>\n          <div>\n            <p className=\"text-sm font-semibold\">Audit Flow Pro</p>\n            <p className=\"text-xs text-muted-foreground\">Audit Platform</p>\n          </div>\n        </div>\n      </SidebarHeader>\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Navigation</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {visibleItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton\n                    asChild\n                    isActive={location === item.url}\n                    data-testid={`sidebar-${item.title.toLowerCase().replace(/\\s+/g, '-')}`}\n                  >\n                    <Link href={item.url}>\n                      <item.icon className=\"h-4 w-4\" />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n      <SidebarFooter className=\"p-4 border-t border-sidebar-border\">\n        <div className=\"space-y-2\">\n          {user && (\n            <div className=\"px-2 py-1\">\n              <p className=\"text-sm font-medium\">{user.fullName}</p>\n              <p className=\"text-xs text-muted-foreground\">{user.email}</p>\n              <Badge variant=\"outline\" className=\"mt-1\" data-testid=\"badge-user-role\">\n                {user.role === 'master_admin' ? 'Master Admin' : \n                 user.role === 'admin' ? 'Admin' :\n                 user.role === 'client' ? 'Client' :\n                 'Auditor'}\n              </Badge>\n            </div>\n          )}\n          <Button \n            variant=\"outline\" \n            className=\"w-full justify-start\" \n            onClick={handleLogout}\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"h-4 w-4 mr-2\" />\n            Logout\n          </Button>\n        </div>\n      </SidebarFooter>\n    </Sidebar>\n  );\n}\n","size_bytes":4415},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/AuditFormWizard.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { MapPin, ChevronRight, ChevronLeft, Check } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\n\nconst steps = [\n  \"Basic Info\",\n  \"Checklist\",\n  \"Observations\",\n  \"Business Intel\",\n  \"Follow-up\"\n];\n\nexport function AuditFormWizard() {\n  const [currentStep, setCurrentStep] = useState(0);\n  const [formData, setFormData] = useState({\n    auditDate: \"\",\n    auditorName: \"\",\n    customerName: \"\",\n    siteLocation: \"\",\n    industryType: \"\",\n    auditType: \"\",\n    geoLocation: \"Auto-detected: 28.6139° N, 77.2090° E\",\n  });\n\n  const handleNext = () => {\n    if (currentStep < steps.length - 1) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const handlePrev = () => {\n    if (currentStep > 0) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const handleSubmit = () => {\n    console.log(\"Audit form submitted\", formData);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Progress Steps */}\n      <div className=\"overflow-x-auto pb-2 -mx-4 px-4 md:mx-0 md:px-0\">\n        <div className=\"flex items-center justify-between min-w-max md:min-w-0\">\n          {steps.map((step, index) => {\n            const isActive = index <= currentStep;\n            const isCompleted = index < currentStep;\n            \n            return (\n              <div key={step} className=\"flex items-center\">\n                <div className=\"flex flex-col items-center\">\n                  <Button\n                    type=\"button\"\n                    size=\"icon\"\n                    variant={isActive ? \"default\" : \"outline\"}\n                    className=\"rounded-full\"\n                    onClick={() => setCurrentStep(index)}\n                    data-testid={`button-step-${index + 1}`}\n                    aria-current={index === currentStep ? \"step\" : undefined}\n                    aria-label={`${step}${isCompleted ? \" (completed)\" : isActive ? \" (current)\" : \"\"}`}\n                  >\n                    {isCompleted ? (\n                      <Check className=\"h-5 w-5\" />\n                    ) : (\n                      <span className=\"text-sm font-medium\">{index + 1}</span>\n                    )}\n                  </Button>\n                  <span className=\"mt-2 text-xs font-medium hidden sm:block\">{step}</span>\n                  <span className=\"mt-2 text-xs font-medium sm:hidden\">{step.split(' ')[0]}</span>\n                </div>\n                {index < steps.length - 1 && (\n                  <div\n                    className={`mx-3 md:mx-4 h-0.5 w-12 md:w-16 ${\n                      index < currentStep ? \"bg-primary\" : \"bg-muted\"\n                    }`}\n                  />\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Form Content */}\n      <Card>\n        <CardHeader>\n          <CardTitle>{steps[currentStep]}</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {currentStep === 0 && (\n            <div className=\"grid gap-4\">\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"auditDate\">Audit Date</Label>\n                <Input\n                  id=\"auditDate\"\n                  type=\"date\"\n                  value={formData.auditDate}\n                  onChange={(e) => setFormData({ ...formData, auditDate: e.target.value })}\n                  data-testid=\"input-audit-date\"\n                />\n              </div>\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"auditorName\">Auditor Name</Label>\n                <Input\n                  id=\"auditorName\"\n                  value={formData.auditorName}\n                  onChange={(e) => setFormData({ ...formData, auditorName: e.target.value })}\n                  data-testid=\"input-auditor-name\"\n                  placeholder=\"Enter auditor name\"\n                />\n              </div>\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"customerName\">Customer Name</Label>\n                <Input\n                  id=\"customerName\"\n                  value={formData.customerName}\n                  onChange={(e) => setFormData({ ...formData, customerName: e.target.value })}\n                  data-testid=\"input-customer-name\"\n                  placeholder=\"Enter customer name\"\n                />\n              </div>\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"siteLocation\">Site Location</Label>\n                <Input\n                  id=\"siteLocation\"\n                  value={formData.siteLocation}\n                  onChange={(e) => setFormData({ ...formData, siteLocation: e.target.value })}\n                  data-testid=\"input-site-location\"\n                  placeholder=\"Enter site location\"\n                />\n              </div>\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"industryType\">Industry Type</Label>\n                <Select\n                  value={formData.industryType}\n                  onValueChange={(value) => setFormData({ ...formData, industryType: value })}\n                >\n                  <SelectTrigger id=\"industryType\" data-testid=\"select-industry-type\">\n                    <SelectValue placeholder=\"Select industry\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"pharma\">Pharmaceutical</SelectItem>\n                    <SelectItem value=\"chemical\">Chemical</SelectItem>\n                    <SelectItem value=\"manufacturing\">Manufacturing</SelectItem>\n                    <SelectItem value=\"food\">Food & Beverage</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"auditType\">Audit Type</Label>\n                <Select\n                  value={formData.auditType}\n                  onValueChange={(value) => setFormData({ ...formData, auditType: value })}\n                >\n                  <SelectTrigger id=\"auditType\" data-testid=\"select-audit-type\">\n                    <SelectValue placeholder=\"Select audit type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"fire\">Fire Safety</SelectItem>\n                    <SelectItem value=\"electrical\">Electrical Safety</SelectItem>\n                    <SelectItem value=\"compliance\">Compliance</SelectItem>\n                    <SelectItem value=\"environmental\">Environmental</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"grid gap-2\">\n                <Label>Geo-Location</Label>\n                <div className=\"flex items-center gap-2 rounded-lg border border-input bg-muted p-3\">\n                  <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"text-sm font-mono\">{formData.geoLocation}</span>\n                  <Badge variant=\"secondary\" className=\"ml-auto\">Auto-detected</Badge>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {currentStep === 1 && (\n            <div className=\"space-y-4\">\n              <p className=\"text-sm text-muted-foreground\">\n                Complete the audit checklist for this inspection\n              </p>\n              <div className=\"space-y-3\">\n                {[1, 2, 3].map((i) => (\n                  <div key={i} className=\"rounded-lg border p-4 space-y-3\">\n                    <p className=\"font-medium\">Question {i}: Safety equipment inspection</p>\n                    <Textarea\n                      placeholder=\"Enter observations and current status\"\n                      data-testid={`input-checklist-${i}`}\n                    />\n                    <Input placeholder=\"Recommendations\" data-testid={`input-recommendation-${i}`} />\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {currentStep === 2 && (\n            <div className=\"space-y-4\">\n              <div className=\"grid gap-2\">\n                <Label>Major Non-Compliances</Label>\n                <Textarea\n                  placeholder=\"Describe any major non-compliances observed\"\n                  data-testid=\"input-non-compliances\"\n                />\n              </div>\n              <div className=\"grid gap-2\">\n                <Label>Safety Hazards</Label>\n                <Textarea\n                  placeholder=\"List any safety hazards identified\"\n                  data-testid=\"input-safety-hazards\"\n                />\n              </div>\n              <div className=\"grid gap-2\">\n                <Label>Employee Awareness Level</Label>\n                <Select>\n                  <SelectTrigger data-testid=\"select-awareness-level\">\n                    <SelectValue placeholder=\"Select level\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"low\">Low</SelectItem>\n                    <SelectItem value=\"medium\">Medium</SelectItem>\n                    <SelectItem value=\"high\">High</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          )}\n\n          {currentStep === 3 && (\n            <div className=\"space-y-4\">\n              <div className=\"grid gap-2\">\n                <Label>Client Openness to Support</Label>\n                <Select>\n                  <SelectTrigger data-testid=\"select-client-openness\">\n                    <SelectValue placeholder=\"Select\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"yes\">Yes</SelectItem>\n                    <SelectItem value=\"no\">No</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"grid gap-2\">\n                <Label>Potential Needs</Label>\n                <Textarea\n                  placeholder=\"Describe potential business needs and opportunities\"\n                  data-testid=\"input-potential-needs\"\n                />\n              </div>\n              <div className=\"grid gap-2\">\n                <Label>Lead Recommendations</Label>\n                <Textarea\n                  placeholder=\"Any lead recommendations for products/services\"\n                  data-testid=\"input-lead-recommendations\"\n                />\n              </div>\n            </div>\n          )}\n\n          {currentStep === 4 && (\n            <div className=\"space-y-4\">\n              <div className=\"grid gap-2\">\n                <Label>Client Interest Level</Label>\n                <Select>\n                  <SelectTrigger data-testid=\"select-client-interest\">\n                    <SelectValue placeholder=\"Select level\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"high\">High</SelectItem>\n                    <SelectItem value=\"medium\">Medium</SelectItem>\n                    <SelectItem value=\"low\">Low</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"grid gap-2\">\n                <Label>Contact Details</Label>\n                <Input placeholder=\"Email or phone\" data-testid=\"input-contact-details\" />\n              </div>\n              <div className=\"grid gap-2\">\n                <Label>Auditor Comments</Label>\n                <Textarea\n                  placeholder=\"Additional comments and notes\"\n                  data-testid=\"input-auditor-comments\"\n                />\n              </div>\n              <div className=\"grid gap-2\">\n                <Label>Upload Documents</Label>\n                <Input type=\"file\" multiple data-testid=\"input-upload-documents\" />\n                <p className=\"text-xs text-muted-foreground\">Upload photos or documents (max 10 files)</p>\n              </div>\n            </div>\n          )}\n\n          {/* Navigation Buttons */}\n          <div className=\"flex justify-between gap-3 mt-6\">\n            <Button\n              variant=\"outline\"\n              onClick={handlePrev}\n              disabled={currentStep === 0}\n              data-testid=\"button-prev-step\"\n            >\n              <ChevronLeft className=\"h-4 w-4 mr-2\" />\n              Previous\n            </Button>\n            {currentStep === steps.length - 1 ? (\n              <Button onClick={handleSubmit} data-testid=\"button-submit-audit\">\n                Submit Audit\n                <Check className=\"h-4 w-4 ml-2\" />\n              </Button>\n            ) : (\n              <Button onClick={handleNext} data-testid=\"button-next-step\">\n                Next\n                <ChevronRight className=\"h-4 w-4 ml-2\" />\n              </Button>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":13205},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-11 md:h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 h-11 w-11 md:h-auto md:w-auto rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4883},"client/src/pages/examples/Dashboard.tsx":{"content":"import Dashboard from \"../Dashboard\";\n\nexport default function DashboardExample() {\n  return (\n    <div className=\"p-6\">\n      <Dashboard />\n    </div>\n  );\n}\n","size_bytes":159},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-11 w-11 md:h-4 md:w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1483},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-11 md:h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1147},"client/src/pages/Audits.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus, Search, Filter } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { CreateAuditDialog } from \"@/components/CreateAuditDialog\";\nimport { AuditDetailDialog } from \"@/components/AuditDetailDialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport type { Audit } from \"@shared/schema\";\nimport { format } from \"date-fns\";\nimport { useAuth } from \"@/lib/authContext\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Audits() {\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  const { data: audits = [], isLoading } = useQuery<Audit[]>({\n    queryKey: [\"/api/audits\"],\n  });\n\n  const submitForReviewMutation = useMutation({\n    mutationFn: (auditId: string) => apiRequest(\"POST\", `/api/audits/${auditId}/submit-for-review`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/audits\"] });\n      toast({ title: \"Success\", description: \"Audit submitted for review\" });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message || \"Failed to submit audit\", variant: \"destructive\" });\n    },\n  });\n\n  const approveMutation = useMutation({\n    mutationFn: (auditId: string) => apiRequest(\"POST\", `/api/audits/${auditId}/approve`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/audits\"] });\n      toast({ title: \"Success\", description: \"Audit approved\" });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message || \"Failed to approve audit\", variant: \"destructive\" });\n    },\n  });\n\n  const rejectMutation = useMutation({\n    mutationFn: (auditId: string) => apiRequest(\"POST\", `/api/audits/${auditId}/reject`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/audits\"] });\n      toast({ title: \"Success\", description: \"Audit rejected and returned to draft\" });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message || \"Failed to reject audit\", variant: \"destructive\" });\n    },\n  });\n\n  const closeMutation = useMutation({\n    mutationFn: (auditId: string) => apiRequest(\"POST\", `/api/audits/${auditId}/close`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/audits\"] });\n      toast({ title: \"Success\", description: \"Audit closed\" });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message || \"Failed to close audit\", variant: \"destructive\" });\n    },\n  });\n\n  const getStatusVariant = (status: string) => {\n    switch (status) {\n      case \"approved\":\n        return \"default\";\n      case \"review\":\n        return \"secondary\";\n      case \"draft\":\n        return \"outline\";\n      case \"closed\":\n        return \"outline\";\n      case \"rejected\":\n        return \"outline\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  const formatStatus = (status: string) => {\n    return status.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n  };\n\n  const canSubmitForReview = (audit: Audit) => audit.status === 'draft';\n  const canApprove = (audit: Audit) => user?.role === 'admin' && audit.status === 'review';\n  const canReject = (audit: Audit) => user?.role === 'admin' && audit.status === 'review';\n  const canClose = (audit: Audit) => user?.role === 'admin' && audit.status === 'approved';\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-semibold\" data-testid=\"heading-audits\">\n            Audit Management\n          </h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Plan, execute, and manage all audits\n          </p>\n        </div>\n        <Button onClick={() => setIsCreateOpen(true)} data-testid=\"button-create-audit\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create Audit\n        </Button>\n      </div>\n\n      {/* Search and Filters */}\n      <div className=\"flex gap-3\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search audits...\"\n            className=\"pl-10\"\n            data-testid=\"input-search-audits\"\n          />\n        </div>\n        <Button variant=\"outline\" data-testid=\"button-filter\">\n          <Filter className=\"h-4 w-4 mr-2\" />\n          Filters\n        </Button>\n      </div>\n\n      {isLoading ? (\n        <div className=\"flex items-center justify-center py-12\">\n          <p className=\"text-muted-foreground\">Loading audits...</p>\n        </div>\n      ) : audits.length === 0 ? (\n        <div className=\"flex flex-col items-center justify-center py-12 text-center\">\n          <p className=\"text-muted-foreground\">No audits found</p>\n          <p className=\"text-sm text-muted-foreground mt-1\">Create your first audit to get started</p>\n        </div>\n      ) : (\n        <>\n          {/* Mobile Card View */}\n          <div className=\"md:hidden space-y-3\">\n            {audits.map((audit) => (\n              <Card key={audit.id} data-testid={`card-audit-${audit.id}`} className=\"hover-elevate\">\n                <CardContent className=\"p-4 space-y-3\">\n                  <div className=\"flex items-start justify-between gap-3\">\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"font-mono text-sm font-medium\" data-testid={`text-audit-id-${audit.id}`}>{audit.auditNumber}</p>\n                      <p className=\"text-lg font-semibold mt-1\" data-testid={`text-customer-${audit.id}`}>{audit.customerName}</p>\n                    </div>\n                    <Badge variant={getStatusVariant(audit.status)} data-testid={`badge-status-${audit.id}`}>\n                      {formatStatus(audit.status)}\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                    <div>\n                      <p className=\"text-muted-foreground\">Location</p>\n                      <p className=\"font-medium mt-0.5\" data-testid={`text-location-${audit.id}`}>{audit.siteLocation}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-muted-foreground\">Date</p>\n                      <p className=\"font-medium mt-0.5\" data-testid={`text-date-${audit.id}`}>\n                        {format(new Date(audit.auditDate), \"MMM dd, yyyy\")}\n                      </p>\n                    </div>\n                    <div className=\"col-span-2\">\n                      <p className=\"text-muted-foreground\">Auditor</p>\n                      <p className=\"font-medium mt-0.5\" data-testid={`text-auditor-${audit.id}`}>{audit.auditorName}</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex justify-end gap-2 pt-2 border-t flex-wrap\">\n                    {canSubmitForReview(audit) && (\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        onClick={() => submitForReviewMutation.mutate(audit.id)}\n                        disabled={submitForReviewMutation.isPending}\n                        data-testid={`button-submit-review-${audit.id}`}\n                      >\n                        <Send className=\"h-4 w-4 mr-1\" />\n                        Submit for Review\n                      </Button>\n                    )}\n                    {canApprove(audit) && (\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        onClick={() => approveMutation.mutate(audit.id)}\n                        disabled={approveMutation.isPending}\n                        data-testid={`button-approve-${audit.id}`}\n                      >\n                        <CheckCircle className=\"h-4 w-4 mr-1\" />\n                        Approve\n                      </Button>\n                    )}\n                    {canReject(audit) && (\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        onClick={() => rejectMutation.mutate(audit.id)}\n                        disabled={rejectMutation.isPending}\n                        data-testid={`button-reject-${audit.id}`}\n                      >\n                        <XCircle className=\"h-4 w-4 mr-1\" />\n                        Reject\n                      </Button>\n                    )}\n                    {canClose(audit) && (\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        onClick={() => closeMutation.mutate(audit.id)}\n                        disabled={closeMutation.isPending}\n                        data-testid={`button-close-${audit.id}`}\n                      >\n                        <Archive className=\"h-4 w-4 mr-1\" />\n                        Close\n                      </Button>\n                    )}\n                    <Button variant=\"ghost\" size=\"sm\" data-testid={`button-view-${audit.id}`}>\n                      View\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {/* Desktop Table View */}\n          <div className=\"hidden md:block overflow-x-auto\" style={{ WebkitOverflowScrolling: 'touch' }}>\n            <div className=\"rounded-lg border min-w-[800px]\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Audit ID</TableHead>\n                    <TableHead>Customer</TableHead>\n                    <TableHead>Location</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Date</TableHead>\n                    <TableHead>Auditor</TableHead>\n                    <TableHead className=\"text-right\">Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {audits.map((audit) => (\n                    <TableRow key={audit.id} data-testid={`row-audit-${audit.id}`}>\n                      <TableCell className=\"font-mono text-sm\">{audit.auditNumber}</TableCell>\n                      <TableCell>{audit.customerName}</TableCell>\n                      <TableCell>{audit.siteLocation}</TableCell>\n                      <TableCell>\n                        <Badge variant={getStatusVariant(audit.status)}>\n                          {formatStatus(audit.status)}\n                        </Badge>\n                      </TableCell>\n                      <TableCell className=\"text-muted-foreground\">\n                        {format(new Date(audit.auditDate), \"MMM dd, yyyy\")}\n                      </TableCell>\n                      <TableCell>{audit.auditorName}</TableCell>\n                      <TableCell className=\"text-right\">\n                        <div className=\"flex justify-end gap-2\">\n                          {canSubmitForReview(audit) && (\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\" \n                              onClick={() => submitForReviewMutation.mutate(audit.id)}\n                              disabled={submitForReviewMutation.isPending}\n                              data-testid={`button-submit-review-${audit.id}`}\n                            >\n                              <Send className=\"h-4 w-4 mr-1\" />\n                              Submit\n                            </Button>\n                          )}\n                          {canApprove(audit) && (\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\" \n                              onClick={() => approveMutation.mutate(audit.id)}\n                              disabled={approveMutation.isPending}\n                              data-testid={`button-approve-${audit.id}`}\n                            >\n                              <CheckCircle className=\"h-4 w-4 mr-1\" />\n                              Approve\n                            </Button>\n                          )}\n                          {canReject(audit) && (\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\" \n                              onClick={() => rejectMutation.mutate(audit.id)}\n                              disabled={rejectMutation.isPending}\n                              data-testid={`button-reject-${audit.id}`}\n                            >\n                              <XCircle className=\"h-4 w-4 mr-1\" />\n                              Reject\n                            </Button>\n                          )}\n                          {canClose(audit) && (\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\" \n                              onClick={() => closeMutation.mutate(audit.id)}\n                              disabled={closeMutation.isPending}\n                              data-testid={`button-close-${audit.id}`}\n                            >\n                              <Archive className=\"h-4 w-4 mr-1\" />\n                              Close\n                            </Button>\n                          )}\n                          <Button variant=\"ghost\" size=\"sm\" data-testid={`button-view-${audit.id}`}>\n                            View\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </div>\n        </>\n      )}\n\n      {/* Create Audit Dialog */}\n      <CreateAuditDialog open={isCreateOpen} onOpenChange={setIsCreateOpen} />\n    </div>\n  );\n}\n","size_bytes":14400},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/LeadConversionChart.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\n\n//todo: remove mock functionality\nconst mockData = [\n  { stage: \"Open\", count: 120 },\n  { stage: \"Contacted\", count: 85 },\n  { stage: \"Qualified\", count: 62 },\n  { stage: \"Proposal\", count: 38 },\n  { stage: \"Converted\", count: 24 },\n];\n\nexport function LeadConversionChart() {\n  return (\n    <Card data-testid=\"chart-lead-conversion\">\n      <CardHeader>\n        <CardTitle>Lead Conversion Funnel</CardTitle>\n        <CardDescription>Lead progression through sales stages</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <BarChart data={mockData}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n            <XAxis dataKey=\"stage\" stroke=\"hsl(var(--muted-foreground))\" fontSize={12} />\n            <YAxis stroke=\"hsl(var(--muted-foreground))\" fontSize={12} />\n            <Tooltip \n              contentStyle={{ \n                backgroundColor: \"hsl(var(--popover))\", \n                border: \"1px solid hsl(var(--popover-border))\",\n                borderRadius: \"var(--radius)\"\n              }} \n            />\n            <Legend />\n            <Bar dataKey=\"count\" fill=\"hsl(var(--chart-1))\" name=\"Leads\" />\n          </BarChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1519},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, boolean, integer, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Role types\nexport const userRoles = [\"master_admin\", \"admin\", \"client\", \"auditor\"] as const;\nexport type UserRole = typeof userRoles[number];\n\n// Tenants table for multi-tenancy\nexport const tenants = pgTable(\"tenants\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  subdomain: text(\"subdomain\").unique(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tenantId: varchar(\"tenant_id\").notNull().references(() => tenants.id, { onDelete: 'cascade' }),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  fullName: text(\"full_name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  role: varchar(\"role\", { length: 50 }).notNull().default(\"auditor\"), // master_admin, admin, client, auditor\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Industries master data\nexport const industries = pgTable(\"industries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tenantId: varchar(\"tenant_id\").notNull().references(() => tenants.id, { onDelete: 'cascade' }),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Audit Types master data\nexport const auditTypes = pgTable(\"audit_types\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tenantId: varchar(\"tenant_id\").notNull().references(() => tenants.id, { onDelete: 'cascade' }),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Checklists (templates)\nexport const checklists = pgTable(\"checklists\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tenantId: varchar(\"tenant_id\").notNull().references(() => tenants.id, { onDelete: 'cascade' }),\n  name: text(\"name\").notNull(),\n  auditTypeId: varchar(\"audit_type_id\").references(() => auditTypes.id),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Checklist Items\nexport const checklistItems = pgTable(\"checklist_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  checklistId: varchar(\"checklist_id\").notNull().references(() => checklists.id, { onDelete: 'cascade' }),\n  question: text(\"question\").notNull(),\n  category: text(\"category\"),\n  orderIndex: integer(\"order_index\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Audits\nexport const audits = pgTable(\"audits\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tenantId: varchar(\"tenant_id\").notNull().references(() => tenants.id, { onDelete: 'cascade' }),\n  auditNumber: text(\"audit_number\").notNull(),\n  customerId: text(\"customer_id\").notNull(),\n  customerName: text(\"customer_name\").notNull(),\n  siteLocation: text(\"site_location\").notNull(),\n  industryId: varchar(\"industry_id\").references(() => industries.id),\n  auditTypeId: varchar(\"audit_type_id\").references(() => auditTypes.id),\n  auditorId: varchar(\"auditor_id\").references(() => users.id),\n  auditorName: text(\"auditor_name\").notNull(),\n  auditDate: timestamp(\"audit_date\").notNull(),\n  status: varchar(\"status\", { length: 50 }).notNull().default(\"draft\"), // draft, review, approved, closed, rejected\n  geoLocation: text(\"geo_location\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Audit Checklist Responses\nexport const auditChecklistResponses = pgTable(\"audit_checklist_responses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  auditId: varchar(\"audit_id\").notNull().references(() => audits.id, { onDelete: 'cascade' }),\n  checklistItemId: varchar(\"checklist_item_id\").notNull().references(() => checklistItems.id),\n  response: varchar(\"response\", { length: 50 }).notNull(), // yes, no, na, partial\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Observations\nexport const observations = pgTable(\"observations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  auditId: varchar(\"audit_id\").notNull().references(() => audits.id, { onDelete: 'cascade' }),\n  category: text(\"category\").notNull(),\n  description: text(\"description\").notNull(),\n  severity: varchar(\"severity\", { length: 50 }).notNull(), // critical, high, medium, low\n  recommendation: text(\"recommendation\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Business Intelligence Data\nexport const businessIntelligence = pgTable(\"business_intelligence\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  auditId: varchar(\"audit_id\").notNull().references(() => audits.id, { onDelete: 'cascade' }),\n  marketPotential: varchar(\"market_potential\", { length: 50 }),\n  competitorPresence: text(\"competitor_presence\"),\n  customerFeedback: text(\"customer_feedback\"),\n  additionalNotes: text(\"additional_notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Leads\nexport const leads = pgTable(\"leads\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tenantId: varchar(\"tenant_id\").notNull().references(() => tenants.id, { onDelete: 'cascade' }),\n  leadNumber: text(\"lead_number\").notNull(),\n  auditId: varchar(\"audit_id\").references(() => audits.id),\n  companyName: text(\"company_name\").notNull(),\n  contactPerson: text(\"contact_person\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\").notNull(),\n  industryId: varchar(\"industry_id\").references(() => industries.id),\n  status: varchar(\"status\", { length: 50 }).notNull().default(\"new\"), // new, qualified, in_progress, converted, closed\n  priority: varchar(\"priority\", { length: 50 }).notNull().default(\"medium\"), // low, medium, high, urgent\n  estimatedValue: integer(\"estimated_value\"),\n  notes: text(\"notes\"),\n  assignedTo: varchar(\"assigned_to\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Files/Attachments\nexport const files = pgTable(\"files\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  fileName: text(\"file_name\").notNull(),\n  fileUrl: text(\"file_url\").notNull(),\n  fileType: text(\"file_type\").notNull(),\n  fileSize: integer(\"file_size\").notNull(),\n  entityType: varchar(\"entity_type\", { length: 50 }).notNull(), // audit, lead, observation\n  entityId: varchar(\"entity_id\").notNull(),\n  uploadedBy: varchar(\"uploaded_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Follow-up Actions\nexport const followUpActions = pgTable(\"follow_up_actions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  auditId: varchar(\"audit_id\").notNull().references(() => audits.id, { onDelete: 'cascade' }),\n  action: text(\"action\").notNull(),\n  assignedTo: text(\"assigned_to\").notNull(),\n  dueDate: timestamp(\"due_date\").notNull(),\n  status: varchar(\"status\", { length: 50 }).notNull().default(\"pending\"), // pending, in_progress, completed\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Refresh Tokens for JWT management\nexport const refreshTokens = pgTable(\"refresh_tokens\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  token: text(\"token\").notNull().unique(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Insert schemas and types\nexport const insertTenantSchema = createInsertSchema(tenants).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  role: z.enum(userRoles).default(\"auditor\"),\n});\n\nexport const insertIndustrySchema = createInsertSchema(industries).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAuditTypeSchema = createInsertSchema(auditTypes).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertChecklistSchema = createInsertSchema(checklists).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertChecklistItemSchema = createInsertSchema(checklistItems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAuditSchema = createInsertSchema(audits).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAuditChecklistResponseSchema = createInsertSchema(auditChecklistResponses).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertObservationSchema = createInsertSchema(observations).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBusinessIntelligenceSchema = createInsertSchema(businessIntelligence).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertLeadSchema = createInsertSchema(leads).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertFileSchema = createInsertSchema(files).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertFollowUpActionSchema = createInsertSchema(followUpActions).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Authentication schemas\nexport const loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n});\n\nexport const registerSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n  fullName: z.string().min(1),\n  username: z.string().min(3),\n  tenantName: z.string().min(1).optional(),\n});\n\n// Select types\nexport type Tenant = typeof tenants.$inferSelect;\nexport type User = typeof users.$inferSelect;\nexport type Industry = typeof industries.$inferSelect;\nexport type AuditType = typeof auditTypes.$inferSelect;\nexport type Checklist = typeof checklists.$inferSelect;\nexport type ChecklistItem = typeof checklistItems.$inferSelect;\nexport type Audit = typeof audits.$inferSelect;\nexport type AuditChecklistResponse = typeof auditChecklistResponses.$inferSelect;\nexport type Observation = typeof observations.$inferSelect;\nexport type BusinessIntelligence = typeof businessIntelligence.$inferSelect;\nexport type Lead = typeof leads.$inferSelect;\nexport type File = typeof files.$inferSelect;\nexport type FollowUpAction = typeof followUpActions.$inferSelect;\nexport type RefreshToken = typeof refreshTokens.$inferSelect;\n\n// Insert types\nexport type InsertTenant = z.infer<typeof insertTenantSchema>;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type InsertIndustry = z.infer<typeof insertIndustrySchema>;\nexport type InsertAuditType = z.infer<typeof insertAuditTypeSchema>;\nexport type InsertChecklist = z.infer<typeof insertChecklistSchema>;\nexport type InsertChecklistItem = z.infer<typeof insertChecklistItemSchema>;\nexport type InsertAudit = z.infer<typeof insertAuditSchema>;\nexport type InsertAuditChecklistResponse = z.infer<typeof insertAuditChecklistResponseSchema>;\nexport type InsertObservation = z.infer<typeof insertObservationSchema>;\nexport type InsertBusinessIntelligence = z.infer<typeof insertBusinessIntelligenceSchema>;\nexport type InsertLead = z.infer<typeof insertLeadSchema>;\nexport type InsertFile = z.infer<typeof insertFileSchema>;\nexport type InsertFollowUpAction = z.infer<typeof insertFollowUpActionSchema>;\n\n// Auth types\nexport type LoginCredentials = z.infer<typeof loginSchema>;\nexport type RegisterData = z.infer<typeof registerSchema>;\n","size_bytes":11974},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/examples/AuditStatusChart.tsx":{"content":"import { AuditStatusChart } from \"../AuditStatusChart\";\n\nexport default function AuditStatusChartExample() {\n  return (\n    <div className=\"p-4\">\n      <AuditStatusChart />\n    </div>\n  );\n}\n","size_bytes":191},"client/src/components/AuditStatusChart.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from \"recharts\";\n\n//todo: remove mock functionality\nconst mockData = [\n  { name: \"Completed\", value: 45, color: \"hsl(var(--chart-2))\" },\n  { name: \"In Progress\", value: 32, color: \"hsl(var(--chart-3))\" },\n  { name: \"Planning\", value: 18, color: \"hsl(var(--chart-1))\" },\n  { name: \"Pending\", value: 15, color: \"hsl(var(--chart-4))\" },\n];\n\nexport function AuditStatusChart() {\n  return (\n    <Card data-testid=\"chart-audit-status\">\n      <CardHeader>\n        <CardTitle>Audit Status Distribution</CardTitle>\n        <CardDescription>Current audit stages across all projects</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <PieChart>\n            <Pie\n              data={mockData}\n              cx=\"50%\"\n              cy=\"50%\"\n              labelLine={false}\n              label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n              outerRadius={80}\n              fill=\"#8884d8\"\n              dataKey=\"value\"\n            >\n              {mockData.map((entry, index) => (\n                <Cell key={`cell-${index}`} fill={entry.color} />\n              ))}\n            </Pie>\n            <Tooltip />\n            <Legend />\n          </PieChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1480},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/StatCard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { LucideIcon, TrendingUp, TrendingDown } from \"lucide-react\";\n\ninterface StatCardProps {\n  title: string;\n  value: string | number;\n  icon: LucideIcon;\n  trend?: {\n    value: number;\n    isPositive: boolean;\n  };\n  description?: string;\n}\n\nexport function StatCard({ title, value, icon: Icon, trend, description }: StatCardProps) {\n  return (\n    <Card data-testid={`stat-card-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n      <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">{title}</CardTitle>\n        <Icon className=\"h-4 w-4 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold\" data-testid={`stat-value-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n          {value}\n        </div>\n        {trend && (\n          <div className=\"flex items-center gap-1 mt-1\">\n            {trend.isPositive ? (\n              <TrendingUp className=\"h-3 w-3 text-chart-2\" />\n            ) : (\n              <TrendingDown className=\"h-3 w-3 text-chart-5\" />\n            )}\n            <span className={`text-xs ${trend.isPositive ? 'text-chart-2' : 'text-chart-5'}`}>\n              {trend.value}%\n            </span>\n            <span className=\"text-xs text-muted-foreground\">from last month</span>\n          </div>\n        )}\n        {description && (\n          <p className=\"text-xs text-muted-foreground mt-1\">{description}</p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1606},"client/src/pages/examples/Reports.tsx":{"content":"import Reports from \"../Reports\";\n\nexport default function ReportsExample() {\n  return (\n    <div className=\"p-6\">\n      <Reports />\n    </div>\n  );\n}\n","size_bytes":151},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/pages/Dashboard.tsx":{"content":"import { StatCard } from \"@/components/StatCard\";\nimport { AuditStatusChart } from \"@/components/AuditStatusChart\";\nimport { LeadConversionChart } from \"@/components/LeadConversionChart\";\nimport { RecentActivityTable } from \"@/components/RecentActivityTable\";\nimport { ClipboardCheck, Users, TrendingUp, CheckCircle2 } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\ninterface DashboardStats {\n  totalAudits: number;\n  pendingAudits: number;\n  completedAudits: number;\n  totalLeads: number;\n}\n\nexport default function Dashboard() {\n  const { data: stats, isLoading } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-semibold\" data-testid=\"heading-dashboard\">\n          Dashboard\n        </h1>\n        <p className=\"text-muted-foreground mt-1\">\n          Welcome back! Here's your audit and lead overview\n        </p>\n      </div>\n\n      {/* KPI Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <StatCard\n          title=\"Total Audits\"\n          value={isLoading ? \"...\" : stats?.totalAudits.toString() || \"0\"}\n          icon={ClipboardCheck}\n          trend={{ value: 12, isPositive: true }}\n          description=\"Active audits this month\"\n        />\n        <StatCard\n          title=\"Pending Audits\"\n          value={isLoading ? \"...\" : stats?.pendingAudits.toString() || \"0\"}\n          icon={TrendingUp}\n          trend={{ value: 5, isPositive: false }}\n          description=\"Awaiting execution\"\n        />\n        <StatCard\n          title=\"Completed Audits\"\n          value={isLoading ? \"...\" : stats?.completedAudits.toString() || \"0\"}\n          icon={CheckCircle2}\n          trend={{ value: 8, isPositive: true }}\n          description=\"This quarter\"\n        />\n        <StatCard\n          title=\"Leads Generated\"\n          value={isLoading ? \"...\" : stats?.totalLeads.toString() || \"0\"}\n          icon={Users}\n          trend={{ value: 15, isPositive: true }}\n          description=\"From audits\"\n        />\n      </div>\n\n      {/* Charts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <AuditStatusChart />\n        <LeadConversionChart />\n      </div>\n\n      {/* Recent Activity */}\n      <RecentActivityTable />\n    </div>\n  );\n}\n","size_bytes":2356},"client/src/components/examples/StatCard.tsx":{"content":"import { StatCard } from \"../StatCard\";\nimport { ClipboardCheck } from \"lucide-react\";\n\nexport default function StatCardExample() {\n  return (\n    <div className=\"p-4\">\n      <StatCard\n        title=\"Total Audits\"\n        value=\"124\"\n        icon={ClipboardCheck}\n        trend={{ value: 12, isPositive: true }}\n      />\n    </div>\n  );\n}\n","size_bytes":339},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n\n  --foreground: 222 47% 11%;\n\n  --border: 220 13% 91%;\n\n  --card: 220 14% 96%;\n\n  --card-foreground: 222 47% 11%;\n\n  --card-border: 220 13% 91%;\n\n  --sidebar: 220 14% 94%;\n\n  --sidebar-foreground: 222 47% 11%;\n\n  --sidebar-border: 220 13% 88%;\n\n  --sidebar-primary: 220 90% 56%;\n\n  --sidebar-primary-foreground: 210 40% 98%;\n\n  --sidebar-accent: 220 14% 89%;\n\n  --sidebar-accent-foreground: 222 47% 11%;\n\n  --sidebar-ring: 220 90% 56%;\n\n  --popover: 220 14% 92%;\n\n  --popover-foreground: 222 47% 11%;\n\n  --popover-border: 220 13% 86%;\n\n  --primary: 220 90% 56%;\n\n  --primary-foreground: 210 40% 98%;\n\n  --secondary: 220 14% 88%;\n\n  --secondary-foreground: 222 47% 11%;\n\n  --muted: 220 12% 90%;\n\n  --muted-foreground: 215 16% 47%;\n\n  --accent: 220 10% 87%;\n\n  --accent-foreground: 222 47% 11%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 210 40% 98%;\n\n  --input: 220 13% 80%;\n  --ring: 220 90% 56%;\n  --chart-1: 220 90% 56%;\n  --chart-2: 142 71% 45%;\n  --chart-3: 38 92% 50%;\n  --chart-4: 199 89% 48%;\n  --chart-5: 0 84% 60%;\n\n  --font-sans: Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', 'Fira Code', Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 13% 91% / 0.05);\n  --shadow-xs: 0px 1px 2px 0px hsl(220 13% 91% / 0.08);\n  --shadow-sm: 0px 1px 3px 0px hsl(220 13% 91% / 0.10), 0px 1px 2px -1px hsl(220 13% 91% / 0.10);\n  --shadow: 0px 2px 4px 0px hsl(220 13% 91% / 0.10), 0px 1px 2px -1px hsl(220 13% 91% / 0.10);\n  --shadow-md: 0px 4px 6px 0px hsl(220 13% 91% / 0.12), 0px 2px 4px -1px hsl(220 13% 91% / 0.10);\n  --shadow-lg: 0px 10px 15px 0px hsl(220 13% 91% / 0.15), 0px 4px 6px -1px hsl(220 13% 91% / 0.10);\n  --shadow-xl: 0px 20px 25px 0px hsl(220 13% 91% / 0.20), 0px 8px 10px -1px hsl(220 13% 91% / 0.10);\n  --shadow-2xl: 0px 25px 50px 0px hsl(220 13% 91% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 222 47% 11%;\n\n  --foreground: 210 40% 98%;\n\n  --border: 215 25% 27%;\n\n  --card: 217 33% 17%;\n\n  --card-foreground: 210 40% 98%;\n\n  --card-border: 215 25% 30%;\n\n  --sidebar: 217 33% 20%;\n\n  --sidebar-foreground: 210 40% 98%;\n\n  --sidebar-border: 215 25% 32%;\n\n  --sidebar-primary: 220 90% 56%;\n\n  --sidebar-primary-foreground: 210 40% 98%;\n\n  --sidebar-accent: 217 33% 24%;\n\n  --sidebar-accent-foreground: 210 40% 98%;\n\n  --sidebar-ring: 220 90% 56%;\n\n  --popover: 217 33% 22%;\n\n  --popover-foreground: 210 40% 98%;\n\n  --popover-border: 215 25% 34%;\n\n  --primary: 220 90% 56%;\n\n  --primary-foreground: 210 40% 98%;\n\n  --secondary: 217 33% 26%;\n\n  --secondary-foreground: 210 40% 98%;\n\n  --muted: 217 20% 24%;\n\n  --muted-foreground: 215 20% 65%;\n\n  --accent: 217 18% 25%;\n\n  --accent-foreground: 210 40% 98%;\n\n  --destructive: 0 72% 51%;\n\n  --destructive-foreground: 210 40% 98%;\n\n  --input: 215 25% 40%;\n  --ring: 220 90% 56%;\n  --chart-1: 220 90% 70%;\n  --chart-2: 142 71% 60%;\n  --chart-3: 38 92% 65%;\n  --chart-4: 199 89% 65%;\n  --chart-5: 0 84% 70%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(222 47% 11% / 0.30);\n  --shadow-xs: 0px 1px 2px 0px hsl(222 47% 11% / 0.40);\n  --shadow-sm: 0px 1px 3px 0px hsl(222 47% 11% / 0.50), 0px 1px 2px -1px hsl(222 47% 11% / 0.40);\n  --shadow: 0px 2px 4px 0px hsl(222 47% 11% / 0.50), 0px 1px 2px -1px hsl(222 47% 11% / 0.40);\n  --shadow-md: 0px 4px 6px 0px hsl(222 47% 11% / 0.60), 0px 2px 4px -1px hsl(222 47% 11% / 0.50);\n  --shadow-lg: 0px 10px 15px 0px hsl(222 47% 11% / 0.70), 0px 4px 6px -1px hsl(222 47% 11% / 0.60);\n  --shadow-xl: 0px 20px 25px 0px hsl(222 47% 11% / 0.80), 0px 8px 10px -1px hsl(222 47% 11% / 0.70);\n  --shadow-2xl: 0px 25px 50px 0px hsl(222 47% 11% / 0.90);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9957},"client/src/pages/Login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/lib/authContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Building2, Lock, Mail } from \"lucide-react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { login } = useAuth();\n  const { toast } = useToast();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleLogin = async (e?: React.FormEvent) => {\n    if (e) e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      await login(email, password);\n      toast({\n        title: \"Success\",\n        description: \"Logged in successfully\",\n      });\n      // Use window.location to ensure full page reload with updated auth state\n      window.location.href = \"/\";\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Login failed\",\n        variant: \"destructive\",\n      });\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex\">\n      {/* Left Side - Login Form */}\n      <div className=\"flex-1 flex items-center justify-center p-8 bg-background\">\n        <div className=\"w-full max-w-md space-y-6\">\n          <div className=\"flex items-center gap-3 mb-8\">\n            <div className=\"h-12 w-12 rounded-lg bg-primary flex items-center justify-center\">\n              <Building2 className=\"h-7 w-7 text-primary-foreground\" />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-bold\">Audit Flow Pro</h1>\n              <p className=\"text-sm text-muted-foreground\">Audit Platform</p>\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <h2 className=\"text-2xl font-semibold\">Welcome back</h2>\n            <p className=\"text-muted-foreground\">\n              Sign in to access your audit and lead management dashboard\n            </p>\n          </div>\n\n          <form onSubmit={handleLogin} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"admin@example.com\"\n                  className=\"pl-10\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  required\n                  data-testid=\"input-email\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  placeholder=\"••••••••\"\n                  className=\"pl-10\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  required\n                  data-testid=\"input-password\"\n                />\n              </div>\n            </div>\n\n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={isLoading} \n              data-testid=\"button-login\"\n            >\n              {isLoading ? \"Signing in...\" : \"Sign In\"}\n            </Button>\n\n            <div className=\"text-center text-sm\">\n              <div className=\"mb-3 p-3 rounded-md bg-muted/50\">\n                <p className=\"font-semibold mb-2 text-foreground\">Demo Credentials:</p>\n                <div className=\"space-y-1 text-muted-foreground\">\n                  <p><strong>Master Admin:</strong> admin@example.com / admin123</p>\n                  <p><strong>Admin:</strong> admin_user@example.com / demo123</p>\n                  <p><strong>Client:</strong> client_user@example.com / demo123</p>\n                  <p><strong>Auditor:</strong> auditor_user@example.com / demo123</p>\n                </div>\n              </div>\n              <button\n                type=\"button\"\n                className=\"text-primary hover:underline\"\n                onClick={() => setLocation(\"/register\")}\n                data-testid=\"link-register\"\n              >\n                Don't have an account? Sign up\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n\n      {/* Right Side - Illustration */}\n      <div className=\"hidden lg:flex flex-1 bg-primary/5 items-center justify-center p-8\">\n        <div className=\"max-w-md space-y-6 text-center\">\n          <div className=\"mx-auto w-64 h-64 rounded-2xl bg-primary/10 flex items-center justify-center\">\n            <div className=\"space-y-4\">\n              <div className=\"h-16 w-16 mx-auto rounded-lg bg-primary/20 flex items-center justify-center\">\n                <Building2 className=\"h-8 w-8 text-primary\" />\n              </div>\n              <div className=\"space-y-2\">\n                <div className=\"h-3 w-48 bg-primary/20 rounded mx-auto\" />\n                <div className=\"h-3 w-32 bg-primary/10 rounded mx-auto\" />\n                <div className=\"h-3 w-40 bg-primary/10 rounded mx-auto\" />\n              </div>\n            </div>\n          </div>\n          <div className=\"space-y-2\">\n            <h3 className=\"text-xl font-semibold\">Comprehensive Audit Management</h3>\n            <p className=\"text-muted-foreground\">\n              Plan, execute, and report audits across industries. Track leads, manage compliance, and generate insights.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6168},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-11 md:h-10 px-3 min-w-10\",\n        sm: \"h-11 md:h-9 px-2.5 min-w-11 md:min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1555},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/pages/examples/Leads.tsx":{"content":"import Leads from \"../Leads\";\n\nexport default function LeadsExample() {\n  return (\n    <div className=\"p-6\">\n      <Leads />\n    </div>\n  );\n}\n","size_bytes":143},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nfunction getAuthHeaders(): Record<string, string> {\n  const token = localStorage.getItem(\"accessToken\");\n  if (token) {\n    return { Authorization: `Bearer ${token}` };\n  }\n  return {};\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: {\n      ...(data ? { \"Content-Type\": \"application/json\" } : {}),\n      ...getAuthHeaders(),\n    },\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers: getAuthHeaders(),\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1652},"server/storage.ts":{"content":"import { db } from \"./db\";\nimport { eq, desc, and, like, sql } from \"drizzle-orm\";\nimport * as schema from \"@shared/schema\";\nimport type {\n  User, InsertUser,\n  Industry, InsertIndustry,\n  AuditType, InsertAuditType,\n  Checklist, InsertChecklist,\n  ChecklistItem, InsertChecklistItem,\n  Audit, InsertAudit,\n  AuditChecklistResponse, InsertAuditChecklistResponse,\n  Observation, InsertObservation,\n  BusinessIntelligence, InsertBusinessIntelligence,\n  Lead, InsertLead,\n  File, InsertFile,\n  FollowUpAction, InsertFollowUpAction,\n} from \"@shared/schema\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string, tenantId: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  getAllUsers(tenantId: string): Promise<User[]>;\n  updateUser(id: string, tenantId: string, user: Partial<InsertUser>): Promise<User | undefined>;\n  deleteUser(id: string, tenantId: string): Promise<boolean>;\n\n  // Industries\n  getIndustry(id: string, tenantId: string): Promise<Industry | undefined>;\n  createIndustry(industry: InsertIndustry): Promise<Industry>;\n  getAllIndustries(tenantId: string): Promise<Industry[]>;\n  updateIndustry(id: string, tenantId: string, industry: Partial<InsertIndustry>): Promise<Industry | undefined>;\n  deleteIndustry(id: string, tenantId: string): Promise<boolean>;\n\n  // Audit Types\n  getAuditType(id: string, tenantId: string): Promise<AuditType | undefined>;\n  createAuditType(auditType: InsertAuditType): Promise<AuditType>;\n  getAllAuditTypes(tenantId: string): Promise<AuditType[]>;\n  updateAuditType(id: string, tenantId: string, auditType: Partial<InsertAuditType>): Promise<AuditType | undefined>;\n  deleteAuditType(id: string, tenantId: string): Promise<boolean>;\n\n  // Checklists\n  getChecklist(id: string): Promise<Checklist | undefined>;\n  createChecklist(checklist: InsertChecklist): Promise<Checklist>;\n  getAllChecklists(): Promise<Checklist[]>;\n  getChecklistsByAuditType(auditTypeId: string): Promise<Checklist[]>;\n  updateChecklist(id: string, checklist: Partial<InsertChecklist>): Promise<Checklist | undefined>;\n  deleteChecklist(id: string): Promise<boolean>;\n\n  // Checklist Items\n  getChecklistItem(id: string): Promise<ChecklistItem | undefined>;\n  createChecklistItem(item: InsertChecklistItem): Promise<ChecklistItem>;\n  getChecklistItemsByChecklist(checklistId: string): Promise<ChecklistItem[]>;\n  updateChecklistItem(id: string, item: Partial<InsertChecklistItem>): Promise<ChecklistItem | undefined>;\n  deleteChecklistItem(id: string): Promise<boolean>;\n\n  // Audits\n  getAudit(id: string): Promise<Audit | undefined>;\n  createAudit(audit: InsertAudit): Promise<Audit>;\n  getAllAudits(): Promise<Audit[]>;\n  getAuditsByStatus(status: string): Promise<Audit[]>;\n  getAuditsByAuditor(auditorId: string): Promise<Audit[]>;\n  updateAudit(id: string, audit: Partial<InsertAudit>): Promise<Audit | undefined>;\n  deleteAudit(id: string): Promise<boolean>;\n  \n  // Audit Workflow Transitions\n  submitAuditForReview(id: string, tenantId: string): Promise<Audit | undefined>;\n  approveAudit(id: string, tenantId: string): Promise<Audit | undefined>;\n  rejectAudit(id: string, tenantId: string): Promise<Audit | undefined>;\n  closeAudit(id: string, tenantId: string): Promise<Audit | undefined>;\n\n  // Audit Checklist Responses\n  getAuditChecklistResponse(id: string): Promise<AuditChecklistResponse | undefined>;\n  createAuditChecklistResponse(response: InsertAuditChecklistResponse): Promise<AuditChecklistResponse>;\n  getResponsesByAudit(auditId: string): Promise<AuditChecklistResponse[]>;\n  updateAuditChecklistResponse(id: string, response: Partial<InsertAuditChecklistResponse>): Promise<AuditChecklistResponse | undefined>;\n  deleteAuditChecklistResponse(id: string): Promise<boolean>;\n\n  // Observations\n  getObservation(id: string): Promise<Observation | undefined>;\n  createObservation(observation: InsertObservation): Promise<Observation>;\n  getObservationsByAudit(auditId: string): Promise<Observation[]>;\n  updateObservation(id: string, observation: Partial<InsertObservation>): Promise<Observation | undefined>;\n  deleteObservation(id: string): Promise<boolean>;\n\n  // Business Intelligence\n  getBusinessIntelligence(id: string): Promise<BusinessIntelligence | undefined>;\n  createBusinessIntelligence(bi: InsertBusinessIntelligence): Promise<BusinessIntelligence>;\n  getBusinessIntelligenceByAudit(auditId: string): Promise<BusinessIntelligence | undefined>;\n  updateBusinessIntelligence(id: string, bi: Partial<InsertBusinessIntelligence>): Promise<BusinessIntelligence | undefined>;\n  deleteBusinessIntelligence(id: string): Promise<boolean>;\n\n  // Leads\n  getLead(id: string): Promise<Lead | undefined>;\n  createLead(lead: InsertLead): Promise<Lead>;\n  getAllLeads(): Promise<Lead[]>;\n  getLeadsByStatus(status: string): Promise<Lead[]>;\n  getLeadsByAssignedUser(userId: string): Promise<Lead[]>;\n  updateLead(id: string, lead: Partial<InsertLead>): Promise<Lead | undefined>;\n  deleteLead(id: string): Promise<boolean>;\n  \n  // Lead Workflow Transitions\n  qualifyLead(id: string, tenantId: string): Promise<Lead | undefined>;\n  startLeadProgress(id: string, tenantId: string): Promise<Lead | undefined>;\n  convertLead(id: string, tenantId: string): Promise<Lead | undefined>;\n  closeLead(id: string, tenantId: string): Promise<Lead | undefined>;\n\n  // Files\n  getFile(id: string): Promise<File | undefined>;\n  createFile(file: InsertFile): Promise<File>;\n  getFilesByEntity(entityType: string, entityId: string): Promise<File[]>;\n  deleteFile(id: string): Promise<boolean>;\n\n  // Follow-up Actions\n  getFollowUpAction(id: string): Promise<FollowUpAction | undefined>;\n  createFollowUpAction(action: InsertFollowUpAction): Promise<FollowUpAction>;\n  getFollowUpActionsByAudit(auditId: string): Promise<FollowUpAction[]>;\n  updateFollowUpAction(id: string, action: Partial<InsertFollowUpAction>): Promise<FollowUpAction | undefined>;\n  deleteFollowUpAction(id: string): Promise<boolean>;\n\n  // Dashboard stats\n  getDashboardStats(tenantId: string): Promise<{\n    totalAudits: number;\n    pendingAudits: number;\n    completedAudits: number;\n    totalLeads: number;\n  }>;\n\n  // Reports\n  getAuditReports(tenantId: string): Promise<{\n    auditsByStatus: { status: string; count: number }[];\n    auditsByIndustry: { industryName: string; count: number }[];\n    auditsByType: { auditTypeName: string; count: number }[];\n    totalAudits: number;\n  }>;\n\n  getLeadReports(tenantId: string): Promise<{\n    leadsByStatus: { status: string; count: number }[];\n    leadsByIndustry: { industryName: string; count: number }[];\n    leadsByPriority: { priority: string; count: number }[];\n    conversionRate: number;\n    totalEstimatedValue: number;\n    totalLeads: number;\n  }>;\n}\n\nexport class DbStorage implements IStorage {\n  // Users\n  async getUser(id: string, tenantId: string): Promise<User | undefined> {\n    const [user] = await db.select().from(schema.users)\n      .where(and(eq(schema.users.id, id), eq(schema.users.tenantId, tenantId)));\n    return user;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(schema.users).where(eq(schema.users.username, username));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(schema.users).where(eq(schema.users.email, email));\n    return user;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(schema.users).values(insertUser).returning();\n    return user;\n  }\n\n  async getAllUsers(tenantId: string): Promise<User[]> {\n    return await db.select().from(schema.users)\n      .where(eq(schema.users.tenantId, tenantId))\n      .orderBy(desc(schema.users.createdAt));\n  }\n\n  async updateUser(id: string, tenantId: string, user: Partial<InsertUser>): Promise<User | undefined> {\n    const [updated] = await db.update(schema.users)\n      .set(user)\n      .where(and(eq(schema.users.id, id), eq(schema.users.tenantId, tenantId)))\n      .returning();\n    return updated;\n  }\n\n  async deleteUser(id: string, tenantId: string): Promise<boolean> {\n    const result = await db.delete(schema.users)\n      .where(and(eq(schema.users.id, id), eq(schema.users.tenantId, tenantId)));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Industries\n  async getIndustry(id: string, tenantId: string): Promise<Industry | undefined> {\n    const [industry] = await db.select().from(schema.industries)\n      .where(and(eq(schema.industries.id, id), eq(schema.industries.tenantId, tenantId)));\n    return industry;\n  }\n\n  async createIndustry(insertIndustry: InsertIndustry): Promise<Industry> {\n    const [industry] = await db.insert(schema.industries).values(insertIndustry).returning();\n    return industry;\n  }\n\n  async getAllIndustries(tenantId: string): Promise<Industry[]> {\n    return await db.select().from(schema.industries)\n      .where(eq(schema.industries.tenantId, tenantId))\n      .orderBy(schema.industries.name);\n  }\n\n  async updateIndustry(id: string, tenantId: string, industry: Partial<InsertIndustry>): Promise<Industry | undefined> {\n    const [updated] = await db.update(schema.industries)\n      .set(industry)\n      .where(and(eq(schema.industries.id, id), eq(schema.industries.tenantId, tenantId)))\n      .returning();\n    return updated;\n  }\n\n  async deleteIndustry(id: string, tenantId: string): Promise<boolean> {\n    const result = await db.delete(schema.industries)\n      .where(and(eq(schema.industries.id, id), eq(schema.industries.tenantId, tenantId)));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Audit Types\n  async getAuditType(id: string, tenantId: string): Promise<AuditType | undefined> {\n    const [auditType] = await db.select().from(schema.auditTypes)\n      .where(and(eq(schema.auditTypes.id, id), eq(schema.auditTypes.tenantId, tenantId)));\n    return auditType;\n  }\n\n  async createAuditType(insertAuditType: InsertAuditType): Promise<AuditType> {\n    const [auditType] = await db.insert(schema.auditTypes).values(insertAuditType).returning();\n    return auditType;\n  }\n\n  async getAllAuditTypes(tenantId: string): Promise<AuditType[]> {\n    return await db.select().from(schema.auditTypes)\n      .where(eq(schema.auditTypes.tenantId, tenantId))\n      .orderBy(schema.auditTypes.name);\n  }\n\n  async updateAuditType(id: string, tenantId: string, auditType: Partial<InsertAuditType>): Promise<AuditType | undefined> {\n    const [updated] = await db.update(schema.auditTypes)\n      .set(auditType)\n      .where(and(eq(schema.auditTypes.id, id), eq(schema.auditTypes.tenantId, tenantId)))\n      .returning();\n    return updated;\n  }\n\n  async deleteAuditType(id: string, tenantId: string): Promise<boolean> {\n    const result = await db.delete(schema.auditTypes)\n      .where(and(eq(schema.auditTypes.id, id), eq(schema.auditTypes.tenantId, tenantId)));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Checklists\n  async getChecklist(id: string): Promise<Checklist | undefined> {\n    const [checklist] = await db.select().from(schema.checklists).where(eq(schema.checklists.id, id));\n    return checklist;\n  }\n\n  async createChecklist(insertChecklist: InsertChecklist): Promise<Checklist> {\n    const [checklist] = await db.insert(schema.checklists).values(insertChecklist).returning();\n    return checklist;\n  }\n\n  async getAllChecklists(): Promise<Checklist[]> {\n    return await db.select().from(schema.checklists).orderBy(desc(schema.checklists.createdAt));\n  }\n\n  async getChecklistsByAuditType(auditTypeId: string): Promise<Checklist[]> {\n    return await db.select().from(schema.checklists)\n      .where(eq(schema.checklists.auditTypeId, auditTypeId));\n  }\n\n  async updateChecklist(id: string, checklist: Partial<InsertChecklist>): Promise<Checklist | undefined> {\n    const [updated] = await db.update(schema.checklists)\n      .set(checklist)\n      .where(eq(schema.checklists.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteChecklist(id: string): Promise<boolean> {\n    const result = await db.delete(schema.checklists).where(eq(schema.checklists.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Checklist Items\n  async getChecklistItem(id: string): Promise<ChecklistItem | undefined> {\n    const [item] = await db.select().from(schema.checklistItems).where(eq(schema.checklistItems.id, id));\n    return item;\n  }\n\n  async createChecklistItem(insertItem: InsertChecklistItem): Promise<ChecklistItem> {\n    const [item] = await db.insert(schema.checklistItems).values(insertItem).returning();\n    return item;\n  }\n\n  async getChecklistItemsByChecklist(checklistId: string): Promise<ChecklistItem[]> {\n    return await db.select().from(schema.checklistItems)\n      .where(eq(schema.checklistItems.checklistId, checklistId))\n      .orderBy(schema.checklistItems.orderIndex);\n  }\n\n  async updateChecklistItem(id: string, item: Partial<InsertChecklistItem>): Promise<ChecklistItem | undefined> {\n    const [updated] = await db.update(schema.checklistItems)\n      .set(item)\n      .where(eq(schema.checklistItems.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteChecklistItem(id: string): Promise<boolean> {\n    const result = await db.delete(schema.checklistItems).where(eq(schema.checklistItems.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Audits\n  async getAudit(id: string): Promise<Audit | undefined> {\n    const [audit] = await db.select().from(schema.audits).where(eq(schema.audits.id, id));\n    return audit;\n  }\n\n  async createAudit(insertAudit: InsertAudit): Promise<Audit> {\n    const [audit] = await db.insert(schema.audits).values(insertAudit).returning();\n    return audit;\n  }\n\n  async getAllAudits(): Promise<Audit[]> {\n    return await db.select().from(schema.audits).orderBy(desc(schema.audits.auditDate));\n  }\n\n  async getAuditsByStatus(status: string): Promise<Audit[]> {\n    return await db.select().from(schema.audits)\n      .where(eq(schema.audits.status, status))\n      .orderBy(desc(schema.audits.auditDate));\n  }\n\n  async getAuditsByAuditor(auditorId: string): Promise<Audit[]> {\n    return await db.select().from(schema.audits)\n      .where(eq(schema.audits.auditorId, auditorId))\n      .orderBy(desc(schema.audits.auditDate));\n  }\n\n  async updateAudit(id: string, audit: Partial<InsertAudit>): Promise<Audit | undefined> {\n    const [updated] = await db.update(schema.audits)\n      .set({ ...audit, updatedAt: new Date() })\n      .where(eq(schema.audits.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteAudit(id: string): Promise<boolean> {\n    const result = await db.delete(schema.audits).where(eq(schema.audits.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Audit Workflow Transitions\n  async submitAuditForReview(id: string, tenantId: string): Promise<Audit | undefined> {\n    const audit = await this.getAudit(id);\n    if (!audit || audit.tenantId !== tenantId) return undefined;\n    if (audit.status !== 'draft') {\n      throw new Error('Only draft audits can be submitted for review');\n    }\n    const [updated] = await db.update(schema.audits)\n      .set({ status: 'review', updatedAt: new Date() })\n      .where(and(eq(schema.audits.id, id), eq(schema.audits.tenantId, tenantId)))\n      .returning();\n    return updated;\n  }\n\n  async approveAudit(id: string, tenantId: string): Promise<Audit | undefined> {\n    const audit = await this.getAudit(id);\n    if (!audit || audit.tenantId !== tenantId) return undefined;\n    if (audit.status !== 'review') {\n      throw new Error('Only audits in review can be approved');\n    }\n    const [updated] = await db.update(schema.audits)\n      .set({ status: 'approved', updatedAt: new Date() })\n      .where(and(eq(schema.audits.id, id), eq(schema.audits.tenantId, tenantId)))\n      .returning();\n    return updated;\n  }\n\n  async rejectAudit(id: string, tenantId: string): Promise<Audit | undefined> {\n    const audit = await this.getAudit(id);\n    if (!audit || audit.tenantId !== tenantId) return undefined;\n    if (audit.status !== 'review') {\n      throw new Error('Only audits in review can be rejected');\n    }\n    const [updated] = await db.update(schema.audits)\n      .set({ status: 'draft', updatedAt: new Date() })\n      .where(and(eq(schema.audits.id, id), eq(schema.audits.tenantId, tenantId)))\n      .returning();\n    return updated;\n  }\n\n  async closeAudit(id: string, tenantId: string): Promise<Audit | undefined> {\n    const audit = await this.getAudit(id);\n    if (!audit || audit.tenantId !== tenantId) return undefined;\n    if (audit.status !== 'approved') {\n      throw new Error('Only approved audits can be closed');\n    }\n    const [updated] = await db.update(schema.audits)\n      .set({ status: 'closed', updatedAt: new Date() })\n      .where(and(eq(schema.audits.id, id), eq(schema.audits.tenantId, tenantId)))\n      .returning();\n    return updated;\n  }\n\n  // Audit Checklist Responses\n  async getAuditChecklistResponse(id: string): Promise<AuditChecklistResponse | undefined> {\n    const [response] = await db.select().from(schema.auditChecklistResponses)\n      .where(eq(schema.auditChecklistResponses.id, id));\n    return response;\n  }\n\n  async createAuditChecklistResponse(insertResponse: InsertAuditChecklistResponse): Promise<AuditChecklistResponse> {\n    const [response] = await db.insert(schema.auditChecklistResponses).values(insertResponse).returning();\n    return response;\n  }\n\n  async getResponsesByAudit(auditId: string): Promise<AuditChecklistResponse[]> {\n    return await db.select().from(schema.auditChecklistResponses)\n      .where(eq(schema.auditChecklistResponses.auditId, auditId));\n  }\n\n  async updateAuditChecklistResponse(id: string, response: Partial<InsertAuditChecklistResponse>): Promise<AuditChecklistResponse | undefined> {\n    const [updated] = await db.update(schema.auditChecklistResponses)\n      .set(response)\n      .where(eq(schema.auditChecklistResponses.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteAuditChecklistResponse(id: string): Promise<boolean> {\n    const result = await db.delete(schema.auditChecklistResponses).where(eq(schema.auditChecklistResponses.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Observations\n  async getObservation(id: string): Promise<Observation | undefined> {\n    const [observation] = await db.select().from(schema.observations).where(eq(schema.observations.id, id));\n    return observation;\n  }\n\n  async createObservation(insertObservation: InsertObservation): Promise<Observation> {\n    const [observation] = await db.insert(schema.observations).values(insertObservation).returning();\n    return observation;\n  }\n\n  async getObservationsByAudit(auditId: string): Promise<Observation[]> {\n    return await db.select().from(schema.observations)\n      .where(eq(schema.observations.auditId, auditId))\n      .orderBy(desc(schema.observations.createdAt));\n  }\n\n  async updateObservation(id: string, observation: Partial<InsertObservation>): Promise<Observation | undefined> {\n    const [updated] = await db.update(schema.observations)\n      .set(observation)\n      .where(eq(schema.observations.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteObservation(id: string): Promise<boolean> {\n    const result = await db.delete(schema.observations).where(eq(schema.observations.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Business Intelligence\n  async getBusinessIntelligence(id: string): Promise<BusinessIntelligence | undefined> {\n    const [bi] = await db.select().from(schema.businessIntelligence).where(eq(schema.businessIntelligence.id, id));\n    return bi;\n  }\n\n  async createBusinessIntelligence(insertBi: InsertBusinessIntelligence): Promise<BusinessIntelligence> {\n    const [bi] = await db.insert(schema.businessIntelligence).values(insertBi).returning();\n    return bi;\n  }\n\n  async getBusinessIntelligenceByAudit(auditId: string): Promise<BusinessIntelligence | undefined> {\n    const [bi] = await db.select().from(schema.businessIntelligence)\n      .where(eq(schema.businessIntelligence.auditId, auditId));\n    return bi;\n  }\n\n  async updateBusinessIntelligence(id: string, bi: Partial<InsertBusinessIntelligence>): Promise<BusinessIntelligence | undefined> {\n    const [updated] = await db.update(schema.businessIntelligence)\n      .set(bi)\n      .where(eq(schema.businessIntelligence.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteBusinessIntelligence(id: string): Promise<boolean> {\n    const result = await db.delete(schema.businessIntelligence).where(eq(schema.businessIntelligence.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Leads\n  async getLead(id: string): Promise<Lead | undefined> {\n    const [lead] = await db.select().from(schema.leads).where(eq(schema.leads.id, id));\n    return lead;\n  }\n\n  async createLead(insertLead: InsertLead): Promise<Lead> {\n    const [lead] = await db.insert(schema.leads).values(insertLead).returning();\n    return lead;\n  }\n\n  async getAllLeads(): Promise<Lead[]> {\n    return await db.select().from(schema.leads).orderBy(desc(schema.leads.createdAt));\n  }\n\n  async getLeadsByStatus(status: string): Promise<Lead[]> {\n    return await db.select().from(schema.leads)\n      .where(eq(schema.leads.status, status))\n      .orderBy(desc(schema.leads.createdAt));\n  }\n\n  async getLeadsByAssignedUser(userId: string): Promise<Lead[]> {\n    return await db.select().from(schema.leads)\n      .where(eq(schema.leads.assignedTo, userId))\n      .orderBy(desc(schema.leads.createdAt));\n  }\n\n  async updateLead(id: string, lead: Partial<InsertLead>): Promise<Lead | undefined> {\n    const [updated] = await db.update(schema.leads)\n      .set({ ...lead, updatedAt: new Date() })\n      .where(eq(schema.leads.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteLead(id: string): Promise<boolean> {\n    const result = await db.delete(schema.leads).where(eq(schema.leads.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Lead Workflow Transitions\n  async qualifyLead(id: string, tenantId: string): Promise<Lead | undefined> {\n    const lead = await this.getLead(id);\n    if (!lead || lead.tenantId !== tenantId) return undefined;\n    if (lead.status !== 'new') {\n      throw new Error('Only new leads can be qualified');\n    }\n    const [updated] = await db.update(schema.leads)\n      .set({ status: 'qualified', updatedAt: new Date() })\n      .where(and(eq(schema.leads.id, id), eq(schema.leads.tenantId, tenantId)))\n      .returning();\n    return updated;\n  }\n\n  async startLeadProgress(id: string, tenantId: string): Promise<Lead | undefined> {\n    const lead = await this.getLead(id);\n    if (!lead || lead.tenantId !== tenantId) return undefined;\n    if (lead.status !== 'qualified') {\n      throw new Error('Only qualified leads can be moved to in progress');\n    }\n    const [updated] = await db.update(schema.leads)\n      .set({ status: 'in_progress', updatedAt: new Date() })\n      .where(and(eq(schema.leads.id, id), eq(schema.leads.tenantId, tenantId)))\n      .returning();\n    return updated;\n  }\n\n  async convertLead(id: string, tenantId: string): Promise<Lead | undefined> {\n    const lead = await this.getLead(id);\n    if (!lead || lead.tenantId !== tenantId) return undefined;\n    if (lead.status !== 'in_progress') {\n      throw new Error('Only leads in progress can be converted');\n    }\n    const [updated] = await db.update(schema.leads)\n      .set({ status: 'converted', updatedAt: new Date() })\n      .where(and(eq(schema.leads.id, id), eq(schema.leads.tenantId, tenantId)))\n      .returning();\n    return updated;\n  }\n\n  async closeLead(id: string, tenantId: string): Promise<Lead | undefined> {\n    const lead = await this.getLead(id);\n    if (!lead || lead.tenantId !== tenantId) return undefined;\n    if (lead.status === 'converted' || lead.status === 'closed') {\n      throw new Error('Cannot close a converted or already closed lead');\n    }\n    const [updated] = await db.update(schema.leads)\n      .set({ status: 'closed', updatedAt: new Date() })\n      .where(and(eq(schema.leads.id, id), eq(schema.leads.tenantId, tenantId)))\n      .returning();\n    return updated;\n  }\n\n  // Files\n  async getFile(id: string): Promise<File | undefined> {\n    const [file] = await db.select().from(schema.files).where(eq(schema.files.id, id));\n    return file;\n  }\n\n  async createFile(insertFile: InsertFile): Promise<File> {\n    const [file] = await db.insert(schema.files).values(insertFile).returning();\n    return file;\n  }\n\n  async getFilesByEntity(entityType: string, entityId: string): Promise<File[]> {\n    return await db.select().from(schema.files)\n      .where(and(\n        eq(schema.files.entityType, entityType),\n        eq(schema.files.entityId, entityId)\n      ))\n      .orderBy(desc(schema.files.createdAt));\n  }\n\n  async deleteFile(id: string): Promise<boolean> {\n    const result = await db.delete(schema.files).where(eq(schema.files.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Follow-up Actions\n  async getFollowUpAction(id: string): Promise<FollowUpAction | undefined> {\n    const [action] = await db.select().from(schema.followUpActions).where(eq(schema.followUpActions.id, id));\n    return action;\n  }\n\n  async createFollowUpAction(insertAction: InsertFollowUpAction): Promise<FollowUpAction> {\n    const [action] = await db.insert(schema.followUpActions).values(insertAction).returning();\n    return action;\n  }\n\n  async getFollowUpActionsByAudit(auditId: string): Promise<FollowUpAction[]> {\n    return await db.select().from(schema.followUpActions)\n      .where(eq(schema.followUpActions.auditId, auditId))\n      .orderBy(schema.followUpActions.dueDate);\n  }\n\n  async updateFollowUpAction(id: string, action: Partial<InsertFollowUpAction>): Promise<FollowUpAction | undefined> {\n    const [updated] = await db.update(schema.followUpActions)\n      .set(action)\n      .where(eq(schema.followUpActions.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteFollowUpAction(id: string): Promise<boolean> {\n    const result = await db.delete(schema.followUpActions).where(eq(schema.followUpActions.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Dashboard stats\n  async getDashboardStats(tenantId: string): Promise<{\n    totalAudits: number;\n    pendingAudits: number;\n    completedAudits: number;\n    totalLeads: number;\n  }> {\n    const [totalAuditsResult] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(schema.audits)\n      .where(eq(schema.audits.tenantId, tenantId));\n    \n    const [pendingAuditsResult] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(schema.audits)\n      .where(and(\n        eq(schema.audits.tenantId, tenantId),\n        eq(schema.audits.status, 'planning')\n      ));\n    \n    const [completedAuditsResult] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(schema.audits)\n      .where(and(\n        eq(schema.audits.tenantId, tenantId),\n        eq(schema.audits.status, 'completed')\n      ));\n    \n    const [totalLeadsResult] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(schema.leads)\n      .where(eq(schema.leads.tenantId, tenantId));\n\n    return {\n      totalAudits: Number(totalAuditsResult.count),\n      pendingAudits: Number(pendingAuditsResult.count),\n      completedAudits: Number(completedAuditsResult.count),\n      totalLeads: Number(totalLeadsResult.count),\n    };\n  }\n\n  // Reports\n  async getAuditReports(tenantId: string): Promise<{\n    auditsByStatus: { status: string; count: number }[];\n    auditsByIndustry: { industryName: string; count: number }[];\n    auditsByType: { auditTypeName: string; count: number }[];\n    totalAudits: number;\n  }> {\n    // Audits by status\n    const auditsByStatus = await db\n      .select({\n        status: schema.audits.status,\n        count: sql<number>`count(*)`,\n      })\n      .from(schema.audits)\n      .where(eq(schema.audits.tenantId, tenantId))\n      .groupBy(schema.audits.status);\n\n    // Audits by industry\n    const auditsByIndustry = await db\n      .select({\n        industryName: schema.industries.name,\n        count: sql<number>`count(*)`,\n      })\n      .from(schema.audits)\n      .leftJoin(schema.industries, eq(schema.audits.industryId, schema.industries.id))\n      .where(eq(schema.audits.tenantId, tenantId))\n      .groupBy(schema.industries.name);\n\n    // Audits by audit type\n    const auditsByType = await db\n      .select({\n        auditTypeName: schema.auditTypes.name,\n        count: sql<number>`count(*)`,\n      })\n      .from(schema.audits)\n      .leftJoin(schema.auditTypes, eq(schema.audits.auditTypeId, schema.auditTypes.id))\n      .where(eq(schema.audits.tenantId, tenantId))\n      .groupBy(schema.auditTypes.name);\n\n    // Total audits\n    const [totalResult] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(schema.audits)\n      .where(eq(schema.audits.tenantId, tenantId));\n\n    return {\n      auditsByStatus: auditsByStatus.map(row => ({\n        status: row.status || 'unknown',\n        count: Number(row.count),\n      })),\n      auditsByIndustry: auditsByIndustry.map(row => ({\n        industryName: row.industryName || 'Unknown',\n        count: Number(row.count),\n      })),\n      auditsByType: auditsByType.map(row => ({\n        auditTypeName: row.auditTypeName || 'Unknown',\n        count: Number(row.count),\n      })),\n      totalAudits: Number(totalResult.count),\n    };\n  }\n\n  async getLeadReports(tenantId: string): Promise<{\n    leadsByStatus: { status: string; count: number }[];\n    leadsByIndustry: { industryName: string; count: number }[];\n    leadsByPriority: { priority: string; count: number }[];\n    conversionRate: number;\n    totalEstimatedValue: number;\n    totalLeads: number;\n  }> {\n    // Leads by status\n    const leadsByStatus = await db\n      .select({\n        status: schema.leads.status,\n        count: sql<number>`count(*)`,\n      })\n      .from(schema.leads)\n      .where(eq(schema.leads.tenantId, tenantId))\n      .groupBy(schema.leads.status);\n\n    // Leads by industry\n    const leadsByIndustry = await db\n      .select({\n        industryName: schema.industries.name,\n        count: sql<number>`count(*)`,\n      })\n      .from(schema.leads)\n      .leftJoin(schema.industries, eq(schema.leads.industryId, schema.industries.id))\n      .where(eq(schema.leads.tenantId, tenantId))\n      .groupBy(schema.industries.name);\n\n    // Leads by priority\n    const leadsByPriority = await db\n      .select({\n        priority: schema.leads.priority,\n        count: sql<number>`count(*)`,\n      })\n      .from(schema.leads)\n      .where(eq(schema.leads.tenantId, tenantId))\n      .groupBy(schema.leads.priority);\n\n    // Total leads\n    const [totalResult] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(schema.leads)\n      .where(eq(schema.leads.tenantId, tenantId));\n\n    // Converted leads\n    const [convertedResult] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(schema.leads)\n      .where(and(\n        eq(schema.leads.tenantId, tenantId),\n        eq(schema.leads.status, 'converted')\n      ));\n\n    // Total estimated value\n    const [valueResult] = await db\n      .select({ total: sql<number>`sum(${schema.leads.estimatedValue})` })\n      .from(schema.leads)\n      .where(eq(schema.leads.tenantId, tenantId));\n\n    const totalLeads = Number(totalResult.count);\n    const convertedLeads = Number(convertedResult.count);\n    const conversionRate = totalLeads > 0 ? (convertedLeads / totalLeads) * 100 : 0;\n\n    return {\n      leadsByStatus: leadsByStatus.map(row => ({\n        status: row.status || 'unknown',\n        count: Number(row.count),\n      })),\n      leadsByIndustry: leadsByIndustry.map(row => ({\n        industryName: row.industryName || 'Unknown',\n        count: Number(row.count),\n      })),\n      leadsByPriority: leadsByPriority.map(row => ({\n        priority: row.priority || 'unknown',\n        count: Number(row.count),\n      })),\n      conversionRate: Number(conversionRate.toFixed(2)),\n      totalEstimatedValue: Number(valueResult.total) || 0,\n      totalLeads,\n    };\n  }\n}\n\nexport const storage = new DbStorage();\n","size_bytes":32302},"design_guidelines.md":{"content":"# Design Guidelines: Audit & Lead Management Platform\n\n## Design Approach\n\n**Selected Approach**: Design System + Modern Enterprise Reference\n- **Primary Inspiration**: Linear (clean enterprise UI) + Carbon Design System (data-heavy enterprise applications)\n- **Justification**: This is a utility-focused, information-dense enterprise platform where efficiency, data clarity, and professional trustworthiness are paramount. The combination provides modern aesthetics with proven enterprise patterns.\n\n**Key Design Principles**:\n1. **Data Clarity First**: Information hierarchy and readability trump visual flair\n2. **Efficient Workflows**: Minimal clicks, clear actions, predictable patterns\n3. **Professional Trust**: Clean, corporate aesthetic suitable for compliance/audit context\n4. **Field-Ready**: Touch-friendly, works excellently on tablets for on-site auditors\n\n---\n\n## Core Design Elements\n\n### A. Color Palette\n\n**Light Mode**:\n- Primary: 220 90% 56% (Professional blue for CTAs, active states)\n- Background: 0 0% 100% (Pure white)\n- Surface: 220 14% 96% (Light gray for cards/sections)\n- Border: 220 13% 91% (Subtle borders)\n- Text Primary: 222 47% 11% (Near black)\n- Text Secondary: 215 16% 47% (Medium gray)\n- Success: 142 71% 45% (Green for completed/approved)\n- Warning: 38 92% 50% (Amber for pending/review)\n- Error: 0 84% 60% (Red for non-compliance/rejected)\n- Info: 199 89% 48% (Cyan for notifications)\n\n**Dark Mode**:\n- Primary: 220 90% 56% (Same blue, works in dark)\n- Background: 222 47% 11% (Deep navy-black)\n- Surface: 217 33% 17% (Elevated dark gray)\n- Border: 215 25% 27% (Subtle dark borders)\n- Text Primary: 210 40% 98% (Off white)\n- Text Secondary: 215 20% 65% (Light gray)\n- Success/Warning/Error/Info: Slightly desaturated versions of light mode\n\n### B. Typography\n\n**Font Families**:\n- Primary: 'Inter' (body text, UI elements) - Professional, highly readable\n- Headings: 'Inter' (600-700 weight for hierarchy)\n- Monospace: 'JetBrains Mono' (data fields, IDs, codes)\n\n**Scale**:\n- Page Titles: text-3xl font-semibold (30px)\n- Section Headings: text-xl font-semibold (20px)\n- Card Titles: text-lg font-medium (18px)\n- Body: text-base (16px)\n- Small/Meta: text-sm (14px)\n- Captions: text-xs (12px)\n\n### C. Layout System\n\n**Spacing Primitives**: Use Tailwind units of **2, 4, 6, 8, 12, 16, 20** for consistent rhythm\n- Component padding: p-4 to p-6\n- Section spacing: py-8 to py-12\n- Card gaps: gap-4 to gap-6\n- Form fields: space-y-4\n\n**Grid System**:\n- Dashboard: 12-column grid with gap-6\n- Forms: Single column max-w-4xl for readability\n- Data tables: Full width with horizontal scroll on mobile\n- Cards: grid-cols-1 md:grid-cols-2 lg:grid-cols-3 for features/stats\n\n### D. Component Library\n\n**Navigation**:\n- Top navbar: Fixed, h-16, with logo, search, user menu, notifications\n- Sidebar: 64px collapsed (icons only), 256px expanded, sticky positioning\n- Breadcrumbs: text-sm with chevron separators for deep navigation\n\n**Forms & Inputs**:\n- Input fields: h-10, rounded-lg, border-2, focus ring-2 ring-primary\n- Labels: text-sm font-medium, mb-1.5\n- Dropdowns: Custom styled with Heroicons chevron-down\n- Checkboxes/Radio: Larger touch targets (h-5 w-5) for mobile\n- File upload: Drag-and-drop zone with preview thumbnails\n- Validation: Inline error messages in error color below field\n\n**Data Display**:\n- Tables: Striped rows, sticky header, sortable columns with icons\n- Status badges: px-2.5 py-1 rounded-full text-xs font-medium\n- Cards: rounded-xl border shadow-sm, p-6, with hover lift effect\n- Lists: Divided list items with avatar/icon, title, meta text\n\n**Dashboards**:\n- Stat cards: Large number display with trend indicator, sparkline charts\n- Charts: Use Chart.js with brand colors, clean axes, tooltips\n- Filters: Horizontal filter bar with date pickers, dropdowns, search\n- KPI layout: 4-column grid on desktop, stack on mobile\n\n**Actions**:\n- Primary button: bg-primary text-white px-4 py-2 rounded-lg font-medium\n- Secondary: border-2 border-primary text-primary (same dimensions)\n- Ghost: text-primary hover:bg-surface\n- Icon buttons: h-9 w-9 rounded-lg for toolbars\n- Floating Action Button: Bottom-right fixed position for quick audit creation (mobile)\n\n**Overlays**:\n- Modals: max-w-2xl, rounded-2xl, backdrop blur, slide-up animation\n- Drawers: Slide from right, w-96, for detail views/filters\n- Tooltips: Dark bg, white text, text-xs, arrow pointer\n- Toast notifications: Top-right stack, auto-dismiss, with icon\n\n### E. Animations\n\n**Minimal & Purposeful**:\n- Page transitions: 150ms fade-in\n- Hover states: 100ms ease-in-out for buttons/cards\n- Loading states: Subtle skeleton screens (no spinners unless necessary)\n- Success feedback: 300ms checkmark animation on form submit\n- **No decorative animations** - focus on functional feedback only\n\n---\n\n## Page-Specific Designs\n\n### Dashboard (Home)\n- **Layout**: KPI cards row at top (4 metrics: Total Audits, Pending, Completed, Leads Generated)\n- **Charts**: 2-column grid below (Audit Status Pie Chart | Lead Conversion Funnel)\n- **Recent Activity**: Full-width table with last 10 audits/leads, quick actions\n- **No hero section needed** - jump straight to data\n\n### Audit Form (Multi-Step)\n- **Progress Indicator**: Top horizontal stepper (Planning → Execution → Observation → BI → Follow-up)\n- **Form Layout**: Single column, generous spacing, section dividers\n- **Dynamic Checklist**: Accordion-style questions, expand to answer, visual completion indicator\n- **Geo-location**: Auto-fetch with map preview thumbnail\n- **Photo Upload**: Grid of thumbnails with delete option, max 10 images\n\n### Lead Management\n- **Kanban View**: Columns for Open | In Progress | Converted | Rejected with drag-drop cards\n- **Table View Toggle**: For detailed list with filters (Type, Priority, Date Range, Assigned To)\n- **Quick Create**: Modal form for fast lead entry from any page\n- **Detail Panel**: Right drawer with full lead info, activity timeline, linked audits\n\n### Master Data Config\n- **Two-column Layout**: Left navigation tabs (Users, Roles, Customers, etc.) | Right content area\n- **CRUD Tables**: Inline edit, bulk actions, export CSV\n- **Import Templates**: Download template button, upload with validation feedback\n\n### Reports\n- **Filter Sidebar**: Left panel with date range, audit type, industry filters\n- **Report Preview**: Center area with chart/table, export to PDF/Excel buttons\n- **Report Library**: Grid of report cards with icons, descriptions, last run date\n\n### Channel Partner Dashboard\n- **Limited Navigation**: Only Assigned Audits, My Leads, Profile\n- **Simplified KPIs**: Focus on personal metrics, not company-wide\n- **Assignment Notifications**: Prominent badge count on sidebar items\n\n---\n\n## Images\n\n**Dashboard**: No hero image needed - this is a data-first page. Use icon illustrations for empty states only.\n\n**Login/Onboarding**: \n- Full-height split screen: Left 40% = login form on white, Right 60% = abstract illustration of audit/checklist workflow with brand colors (professional, not literal)\n- Image style: Geometric, clean vectors, no photographs\n\n**Empty States**: \n- Illustrations for \"No audits yet\", \"No leads found\" - Simple line art with primary color accent\n- 200x200px centered with helpful CTA below\n\n**No hero sections on internal pages** - this is an enterprise tool focused on efficiency, not marketing.\n\n---\n\n## Accessibility & Responsiveness\n\n- **WCAG AA compliance**: 4.5:1 contrast minimum, focus indicators on all interactive elements\n- **Keyboard navigation**: Tab order logical, Escape closes modals, Enter submits forms\n- **Mobile breakpoints**: \n  - sm: 640px (stack forms, hide sidebar)\n  - md: 768px (2-column layouts)\n  - lg: 1024px (3-column, show sidebar)\n  - xl: 1280px (optimal dashboard)\n- **Touch targets**: Minimum 44x44px for all interactive elements on mobile\n- **Form considerations**: Number inputs with step increment buttons, date pickers mobile-optimized\n\n---\n\n## Brand Consistency\n\n**Overall Aesthetic**: Clean, professional, data-centric enterprise platform inspired by Linear's polish and Carbon's enterprise robustness. Every pixel serves the user's audit workflow - zero decorative fluff.","size_bytes":8190},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-11 w-11 md:h-7 md:w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-11 w-11 md:h-9 md:w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2727},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/pages/examples/MasterData.tsx":{"content":"import MasterData from \"../MasterData\";\n\nexport default function MasterDataExample() {\n  return (\n    <div className=\"p-6\">\n      <MasterData />\n    </div>\n  );\n}\n","size_bytes":163},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useEffect, useState } from \"react\";\n\nexport function ThemeToggle() {\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(\"light\");\n\n  useEffect(() => {\n    const stored = localStorage.getItem(\"theme\") as \"light\" | \"dark\" | null;\n    const initialTheme = stored || \"light\";\n    setTheme(initialTheme);\n    document.documentElement.classList.toggle(\"dark\", initialTheme === \"dark\");\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(newTheme);\n    localStorage.setItem(\"theme\", newTheme);\n    document.documentElement.classList.toggle(\"dark\", newTheme === \"dark\");\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n      className=\"rounded-lg\"\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"h-5 w-5\" />\n      ) : (\n        <Sun className=\"h-5 w-5\" />\n      )}\n    </Button>\n  );\n}\n","size_bytes":1045},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-11 md:h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5749},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 h-11 w-11 md:h-auto md:w-auto rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3878},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-11 w-11 md:h-4 md:w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1072},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/RecentActivityTable.tsx":{"content":"import {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Eye, Edit } from \"lucide-react\";\n\n//todo: remove mock functionality\nconst mockActivities = [\n  {\n    id: \"AUD-2024-001\",\n    type: \"Audit\",\n    customer: \"PharmaCorp Ltd\",\n    industry: \"Pharma\",\n    status: \"Completed\",\n    date: \"2024-01-08\",\n    auditor: \"John Smith\",\n  },\n  {\n    id: \"LEAD-2024-045\",\n    type: \"Lead\",\n    customer: \"ChemTech Industries\",\n    industry: \"Chemical\",\n    status: \"Open\",\n    date: \"2024-01-07\",\n    auditor: \"Sarah Johnson\",\n  },\n  {\n    id: \"AUD-2024-002\",\n    type: \"Audit\",\n    customer: \"BioMed Systems\",\n    industry: \"Pharma\",\n    status: \"In Progress\",\n    date: \"2024-01-06\",\n    auditor: \"Mike Davis\",\n  },\n];\n\nconst statusColors: Record<string, \"default\" | \"secondary\" | \"destructive\" | \"outline\"> = {\n  Completed: \"default\",\n  \"In Progress\": \"secondary\",\n  Open: \"outline\",\n  Rejected: \"destructive\",\n};\n\nexport function RecentActivityTable() {\n  return (\n    <Card data-testid=\"table-recent-activity\">\n      <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0\">\n        <CardTitle>Recent Activity</CardTitle>\n        <Button variant=\"outline\" size=\"sm\" data-testid=\"button-view-all\">\n          View All\n        </Button>\n      </CardHeader>\n      <CardContent className=\"p-0\">\n        <div className=\"overflow-x-auto px-6 pb-6\" style={{ WebkitOverflowScrolling: 'touch' }}>\n          <div className=\"min-w-[800px]\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>ID</TableHead>\n                  <TableHead>Type</TableHead>\n                  <TableHead>Customer</TableHead>\n                  <TableHead>Industry</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Date</TableHead>\n                  <TableHead>Auditor</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {mockActivities.map((activity) => (\n                  <TableRow key={activity.id} data-testid={`row-activity-${activity.id}`}>\n                    <TableCell className=\"font-mono text-sm\">{activity.id}</TableCell>\n                    <TableCell>{activity.type}</TableCell>\n                    <TableCell>{activity.customer}</TableCell>\n                    <TableCell>{activity.industry}</TableCell>\n                    <TableCell>\n                      <Badge variant={statusColors[activity.status] || \"outline\"}>\n                        {activity.status}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"text-muted-foreground\">{activity.date}</TableCell>\n                    <TableCell>{activity.auditor}</TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex justify-end gap-2\">\n                        <Button variant=\"ghost\" size=\"icon\" data-testid={`button-view-${activity.id}`}>\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                        <Button variant=\"ghost\" size=\"icon\" data-testid={`button-edit-${activity.id}`}>\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3785},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertUserSchema,\n  insertAuditSchema, \n  insertLeadSchema, \n  insertIndustrySchema, \n  insertAuditTypeSchema,\n  insertChecklistSchema,\n  insertChecklistItemSchema,\n  insertAuditChecklistResponseSchema,\n  insertObservationSchema,\n  insertBusinessIntelligenceSchema,\n  insertFileSchema,\n  insertFollowUpActionSchema,\n} from \"@shared/schema\";\nimport authRoutes from \"./authRoutes\";\nimport { authenticateToken, authorizeRoles, hashPassword, type AuthRequest } from \"./auth\";\n\n// CSV escaping utility\nfunction escapeCSVField(field: string | number): string {\n  if (typeof field === 'number') {\n    return field.toString();\n  }\n  \n  const stringField = String(field);\n  \n  // Check if field needs escaping (contains comma, quote, or newline)\n  if (stringField.includes(',') || stringField.includes('\"') || stringField.includes('\\n')) {\n    // Escape double quotes by doubling them and wrap in quotes\n    return `\"${stringField.replace(/\"/g, '\"\"')}\"`;\n  }\n  \n  return stringField;\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Auth routes (public)\n  app.use(\"/api/auth\", authRoutes);\n  \n  // Protect all API routes except /api/auth\n  app.use(\"/api/*\", (req, res, next) => {\n    if (req.path.startsWith(\"/api/auth\")) {\n      return next();\n    }\n    authenticateToken(req as AuthRequest, res, next);\n  });\n  \n  // Dashboard Stats\n  app.get(\"/api/dashboard/stats\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      const stats = await storage.getDashboardStats(req.user.tenantId);\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Reports (Master Admin and Admin only)\n  app.get(\"/api/reports/audits\", authenticateToken, authorizeRoles(\"master_admin\", \"admin\"), async (req: AuthRequest, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      const reports = await storage.getAuditReports(req.user.tenantId);\n      res.json(reports);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch audit reports\" });\n    }\n  });\n\n  app.get(\"/api/reports/leads\", authenticateToken, authorizeRoles(\"master_admin\", \"admin\"), async (req: AuthRequest, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      const reports = await storage.getLeadReports(req.user.tenantId);\n      res.json(reports);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch lead reports\" });\n    }\n  });\n\n  // CSV Export Endpoints (Master Admin and Admin only)\n  app.get(\"/api/reports/audits/export/csv\", authenticateToken, authorizeRoles(\"master_admin\", \"admin\"), async (req: AuthRequest, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      const reports = await storage.getAuditReports(req.user.tenantId);\n      \n      // Generate CSV for audits by status\n      let csv = \"Audit Reports Export\\n\\n\";\n      csv += \"Audits by Status\\n\";\n      csv += \"Status,Count\\n\";\n      reports.auditsByStatus.forEach(row => {\n        csv += `${escapeCSVField(row.status)},${escapeCSVField(row.count)}\\n`;\n      });\n      \n      csv += \"\\nAudits by Industry\\n\";\n      csv += \"Industry,Count\\n\";\n      reports.auditsByIndustry.forEach(row => {\n        csv += `${escapeCSVField(row.industryName)},${escapeCSVField(row.count)}\\n`;\n      });\n      \n      csv += \"\\nAudits by Type\\n\";\n      csv += \"Audit Type,Count\\n\";\n      reports.auditsByType.forEach(row => {\n        csv += `${escapeCSVField(row.auditTypeName)},${escapeCSVField(row.count)}\\n`;\n      });\n      \n      csv += `\\nTotal Audits,${escapeCSVField(reports.totalAudits)}\\n`;\n      \n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', 'attachment; filename=audit-reports.csv');\n      res.send(csv);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to export audit reports\" });\n    }\n  });\n\n  app.get(\"/api/reports/leads/export/csv\", authenticateToken, authorizeRoles(\"master_admin\", \"admin\"), async (req: AuthRequest, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      const reports = await storage.getLeadReports(req.user.tenantId);\n      \n      // Generate CSV for leads\n      let csv = \"Lead Reports Export\\n\\n\";\n      csv += \"Leads by Status\\n\";\n      csv += \"Status,Count\\n\";\n      reports.leadsByStatus.forEach(row => {\n        csv += `${escapeCSVField(row.status)},${escapeCSVField(row.count)}\\n`;\n      });\n      \n      csv += \"\\nLeads by Industry\\n\";\n      csv += \"Industry,Count\\n\";\n      reports.leadsByIndustry.forEach(row => {\n        csv += `${escapeCSVField(row.industryName)},${escapeCSVField(row.count)}\\n`;\n      });\n      \n      csv += \"\\nLeads by Priority\\n\";\n      csv += \"Priority,Count\\n\";\n      reports.leadsByPriority.forEach(row => {\n        csv += `${escapeCSVField(row.priority)},${escapeCSVField(row.count)}\\n`;\n      });\n      \n      csv += \"\\nSummary Metrics\\n\";\n      csv += \"Metric,Value\\n\";\n      csv += `${escapeCSVField(\"Total Leads\")},${escapeCSVField(reports.totalLeads)}\\n`;\n      csv += `${escapeCSVField(\"Conversion Rate\")},${escapeCSVField(reports.conversionRate + \"%\")}\\n`;\n      csv += `${escapeCSVField(\"Total Estimated Value\")},${escapeCSVField(\"$\" + reports.totalEstimatedValue)}\\n`;\n      \n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', 'attachment; filename=lead-reports.csv');\n      res.send(csv);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to export lead reports\" });\n    }\n  });\n\n  // Users (Master Admin and Admin only for list, authenticated for own profile)\n  app.get(\"/api/users\", authenticateToken, authorizeRoles(\"master_admin\", \"admin\"), async (req: AuthRequest, res) => {\n    try {\n      const users = await storage.getAllUsers(req.user!.tenantId);\n      res.json(users);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.get(\"/api/users/:id\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const user = await storage.getUser(req.params.id, req.user!.tenantId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  app.post(\"/api/users\", authenticateToken, authorizeRoles(\"master_admin\", \"admin\"), async (req: AuthRequest, res) => {\n    try {\n      const validated = insertUserSchema.omit({ tenantId: true }).parse(req.body);\n      const hashedPassword = await hashPassword(validated.password);\n      const user = await storage.createUser({\n        ...validated,\n        password: hashedPassword,\n        tenantId: req.user!.tenantId,\n      });\n      res.status(201).json(user);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid data\" });\n    }\n  });\n\n  app.put(\"/api/users/:id\", authenticateToken, authorizeRoles(\"master_admin\", \"admin\"), async (req: AuthRequest, res) => {\n    try {\n      const validated = insertUserSchema.omit({ tenantId: true }).partial().parse(req.body);\n      const updateData = { ...validated };\n      \n      // Hash password if it's being updated\n      if (validated.password) {\n        updateData.password = await hashPassword(validated.password);\n      }\n      \n      const user = await storage.updateUser(req.params.id, req.user!.tenantId, updateData);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid data\" });\n    }\n  });\n\n  app.delete(\"/api/users/:id\", authenticateToken, authorizeRoles(\"master_admin\", \"admin\"), async (req: AuthRequest, res) => {\n    try {\n      const deleted = await storage.deleteUser(req.params.id, req.user!.tenantId);\n      if (!deleted) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete user\" });\n    }\n  });\n\n  // Industries (Protected)\n  app.get(\"/api/industries\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const industries = await storage.getAllIndustries(req.user!.tenantId);\n      res.json(industries);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch industries\" });\n    }\n  });\n\n  app.get(\"/api/industries/:id\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const industry = await storage.getIndustry(req.params.id, req.user!.tenantId);\n      if (!industry) {\n        return res.status(404).json({ message: \"Industry not found\" });\n      }\n      res.json(industry);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch industry\" });\n    }\n  });\n\n  app.post(\"/api/industries\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const validated = insertIndustrySchema.omit({ tenantId: true }).parse(req.body);\n      const industry = await storage.createIndustry({\n        ...validated,\n        tenantId: req.user!.tenantId,\n      });\n      res.status(201).json(industry);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid data\" });\n    }\n  });\n\n  app.put(\"/api/industries/:id\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const validated = insertIndustrySchema.omit({ tenantId: true }).partial().parse(req.body);\n      const industry = await storage.updateIndustry(req.params.id, req.user!.tenantId, validated);\n      if (!industry) {\n        return res.status(404).json({ message: \"Industry not found\" });\n      }\n      res.json(industry);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid data\" });\n    }\n  });\n\n  app.delete(\"/api/industries/:id\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const deleted = await storage.deleteIndustry(req.params.id, req.user!.tenantId);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Industry not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete industry\" });\n    }\n  });\n\n  // Audit Types\n  app.get(\"/api/audit-types\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const auditTypes = await storage.getAllAuditTypes(req.user!.tenantId);\n      res.json(auditTypes);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch audit types\" });\n    }\n  });\n\n  app.get(\"/api/audit-types/:id\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const auditType = await storage.getAuditType(req.params.id, req.user!.tenantId);\n      if (!auditType) {\n        return res.status(404).json({ message: \"Audit type not found\" });\n      }\n      res.json(auditType);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch audit type\" });\n    }\n  });\n\n  app.post(\"/api/audit-types\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const validated = insertAuditTypeSchema.omit({ tenantId: true }).parse(req.body);\n      const auditType = await storage.createAuditType({\n        ...validated,\n        tenantId: req.user!.tenantId,\n      });\n      res.status(201).json(auditType);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid data\" });\n    }\n  });\n\n  app.put(\"/api/audit-types/:id\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const validated = insertAuditTypeSchema.omit({ tenantId: true }).partial().parse(req.body);\n      const auditType = await storage.updateAuditType(req.params.id, req.user!.tenantId, validated);\n      if (!auditType) {\n        return res.status(404).json({ message: \"Audit type not found\" });\n      }\n      res.json(auditType);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid data\" });\n    }\n  });\n\n  app.delete(\"/api/audit-types/:id\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const deleted = await storage.deleteAuditType(req.params.id, req.user!.tenantId);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Audit type not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete audit type\" });\n    }\n  });\n\n  // Checklists\n  app.get(\"/api/checklists\", async (req, res) => {\n    try {\n      const { auditTypeId } = req.query;\n      const checklists = auditTypeId \n        ? await storage.getChecklistsByAuditType(auditTypeId as string)\n        : await storage.getAllChecklists();\n      res.json(checklists);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch checklists\" });\n    }\n  });\n\n  app.get(\"/api/checklists/:id\", async (req, res) => {\n    try {\n      const checklist = await storage.getChecklist(req.params.id);\n      if (!checklist) {\n        return res.status(404).json({ message: \"Checklist not found\" });\n      }\n      res.json(checklist);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch checklist\" });\n    }\n  });\n\n  app.post(\"/api/checklists\", async (req, res) => {\n    try {\n      const validated = insertChecklistSchema.parse(req.body);\n      const checklist = await storage.createChecklist(validated);\n      res.status(201).json(checklist);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid data\" });\n    }\n  });\n\n  app.put(\"/api/checklists/:id\", async (req, res) => {\n    try {\n      const validated = insertChecklistSchema.partial().parse(req.body);\n      const checklist = await storage.updateChecklist(req.params.id, validated);\n      if (!checklist) {\n        return res.status(404).json({ message: \"Checklist not found\" });\n      }\n      res.json(checklist);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid data\" });\n    }\n  });\n\n  app.delete(\"/api/checklists/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteChecklist(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Checklist not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete checklist\" });\n    }\n  });\n\n  // Checklist Items\n  app.get(\"/api/checklist-items\", async (req, res) => {\n    try {\n      const { checklistId } = req.query;\n      if (!checklistId) {\n        return res.status(400).json({ message: \"checklistId is required\" });\n      }\n      const items = await storage.getChecklistItemsByChecklist(checklistId as string);\n      res.json(items);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch checklist items\" });\n    }\n  });\n\n  app.get(\"/api/checklist-items/:id\", async (req, res) => {\n    try {\n      const item = await storage.getChecklistItem(req.params.id);\n      if (!item) {\n        return res.status(404).json({ message: \"Checklist item not found\" });\n      }\n      res.json(item);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch checklist item\" });\n    }\n  });\n\n  app.post(\"/api/checklist-items\", async (req, res) => {\n    try {\n      const validated = insertChecklistItemSchema.parse(req.body);\n      const item = await storage.createChecklistItem(validated);\n      res.status(201).json(item);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid data\" });\n    }\n  });\n\n  app.put(\"/api/checklist-items/:id\", async (req, res) => {\n    try {\n      const validated = insertChecklistItemSchema.partial().parse(req.body);\n      const item = await storage.updateChecklistItem(req.params.id, validated);\n      if (!item) {\n        return res.status(404).json({ message: \"Checklist item not found\" });\n      }\n      res.json(item);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid data\" });\n    }\n  });\n\n  app.delete(\"/api/checklist-items/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteChecklistItem(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Checklist item not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete checklist item\" });\n    }\n  });\n\n  // Audits\n  app.get(\"/api/audits\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const { status, auditorId } = req.query;\n      let audits;\n      if (status) {\n        audits = await storage.getAuditsByStatus(status as string);\n      } else if (auditorId) {\n        audits = await storage.getAuditsByAuditor(auditorId as string);\n      } else {\n        audits = await storage.getAllAudits();\n      }\n      res.json(audits);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch audits\" });\n    }\n  });\n\n  app.get(\"/api/audits/:id\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const audit = await storage.getAudit(req.params.id);\n      if (!audit) {\n        return res.status(404).json({ message: \"Audit not found\" });\n      }\n      res.json(audit);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch audit\" });\n    }\n  });\n\n  app.post(\"/api/audits\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      const dataWithTenant = { \n        ...req.body, \n        tenantId: req.user.tenantId,\n        // Convert auditDate from ISO string to Date object\n        auditDate: req.body.auditDate ? new Date(req.body.auditDate) : undefined\n      };\n      const validated = insertAuditSchema.parse(dataWithTenant);\n      const audit = await storage.createAudit(validated);\n      res.status(201).json(audit);\n    } catch (error: any) {\n      console.error(\"Audit creation validation error:\", error);\n      res.status(400).json({ message: error.message || \"Invalid data\" });\n    }\n  });\n\n  app.put(\"/api/audits/:id\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const validated = insertAuditSchema.partial().parse(req.body);\n      const audit = await storage.updateAudit(req.params.id, validated);\n      if (!audit) {\n        return res.status(404).json({ message: \"Audit not found\" });\n      }\n      res.json(audit);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid data\" });\n    }\n  });\n\n  app.delete(\"/api/audits/:id\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const deleted = await storage.deleteAudit(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Audit not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete audit\" });\n    }\n  });\n\n  // Audit Workflow Transitions\n  app.post(\"/api/audits/:id/submit-for-review\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      const audit = await storage.submitAuditForReview(req.params.id, req.user.tenantId);\n      if (!audit) {\n        return res.status(404).json({ message: \"Audit not found\" });\n      }\n      res.json(audit);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Failed to submit audit for review\" });\n    }\n  });\n\n  app.post(\"/api/audits/:id/approve\", async (req: AuthRequest, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      if (req.user.role !== 'master_admin' && req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Only admins can approve audits\" });\n      }\n      const audit = await storage.approveAudit(req.params.id, req.user.tenantId);\n      if (!audit) {\n        return res.status(404).json({ message: \"Audit not found\" });\n      }\n      res.json(audit);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Failed to approve audit\" });\n    }\n  });\n\n  app.post(\"/api/audits/:id/reject\", async (req: AuthRequest, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      if (req.user.role !== 'master_admin' && req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Only admins can reject audits\" });\n      }\n      const audit = await storage.rejectAudit(req.params.id, req.user.tenantId);\n      if (!audit) {\n        return res.status(404).json({ message: \"Audit not found\" });\n      }\n      res.json(audit);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Failed to reject audit\" });\n    }\n  });\n\n  app.post(\"/api/audits/:id/close\", async (req: AuthRequest, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      if (req.user.role !== 'master_admin' && req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Only admins can close audits\" });\n      }\n      const audit = await storage.closeAudit(req.params.id, req.user.tenantId);\n      if (!audit) {\n        return res.status(404).json({ message: \"Audit not found\" });\n      }\n      res.json(audit);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Failed to close audit\" });\n    }\n  });\n\n  // Audit Checklist Responses\n  app.get(\"/api/audit-checklist-responses\", async (req, res) => {\n    try {\n      const { auditId } = req.query;\n      if (!auditId) {\n        return res.status(400).json({ message: \"auditId is required\" });\n      }\n      const responses = await storage.getResponsesByAudit(auditId as string);\n      res.json(responses);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch responses\" });\n    }\n  });\n\n  app.post(\"/api/audit-checklist-responses\", async (req, res) => {\n    try {\n      const validated = insertAuditChecklistResponseSchema.parse(req.body);\n      const response = await storage.createAuditChecklistResponse(validated);\n      res.status(201).json(response);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid data\" });\n    }\n  });\n\n  app.put(\"/api/audit-checklist-responses/:id\", async (req, res) => {\n    try {\n      const validated = insertAuditChecklistResponseSchema.partial().parse(req.body);\n      const response = await storage.updateAuditChecklistResponse(req.params.id, validated);\n      if (!response) {\n        return res.status(404).json({ message: \"Response not found\" });\n      }\n      res.json(response);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid data\" });\n    }\n  });\n\n  app.delete(\"/api/audit-checklist-responses/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteAuditChecklistResponse(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Response not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete response\" });\n    }\n  });\n\n  // Observations\n  app.get(\"/api/observations\", async (req, res) => {\n    try {\n      const { auditId } = req.query;\n      if (!auditId) {\n        return res.status(400).json({ message: \"auditId is required\" });\n      }\n      const observations = await storage.getObservationsByAudit(auditId as string);\n      res.json(observations);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch observations\" });\n    }\n  });\n\n  app.post(\"/api/observations\", async (req, res) => {\n    try {\n      const validated = insertObservationSchema.parse(req.body);\n      const observation = await storage.createObservation(validated);\n      res.status(201).json(observation);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid data\" });\n    }\n  });\n\n  app.put(\"/api/observations/:id\", async (req, res) => {\n    try {\n      const validated = insertObservationSchema.partial().parse(req.body);\n      const observation = await storage.updateObservation(req.params.id, validated);\n      if (!observation) {\n        return res.status(404).json({ message: \"Observation not found\" });\n      }\n      res.json(observation);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid data\" });\n    }\n  });\n\n  app.delete(\"/api/observations/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteObservation(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Observation not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete observation\" });\n    }\n  });\n\n  // Business Intelligence\n  app.get(\"/api/business-intelligence\", async (req, res) => {\n    try {\n      const { auditId } = req.query;\n      if (!auditId) {\n        return res.status(400).json({ message: \"auditId is required\" });\n      }\n      const bi = await storage.getBusinessIntelligenceByAudit(auditId as string);\n      res.json(bi);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch business intelligence\" });\n    }\n  });\n\n  app.post(\"/api/business-intelligence\", async (req, res) => {\n    try {\n      const validated = insertBusinessIntelligenceSchema.parse(req.body);\n      const bi = await storage.createBusinessIntelligence(validated);\n      res.status(201).json(bi);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid data\" });\n    }\n  });\n\n  app.put(\"/api/business-intelligence/:id\", async (req, res) => {\n    try {\n      const validated = insertBusinessIntelligenceSchema.partial().parse(req.body);\n      const bi = await storage.updateBusinessIntelligence(req.params.id, validated);\n      if (!bi) {\n        return res.status(404).json({ message: \"Business intelligence not found\" });\n      }\n      res.json(bi);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid data\" });\n    }\n  });\n\n  app.delete(\"/api/business-intelligence/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteBusinessIntelligence(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Business intelligence not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete business intelligence\" });\n    }\n  });\n\n  // Leads\n  app.get(\"/api/leads\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const { status, assignedTo } = req.query;\n      let leads;\n      if (status) {\n        leads = await storage.getLeadsByStatus(status as string);\n      } else if (assignedTo) {\n        leads = await storage.getLeadsByAssignedUser(assignedTo as string);\n      } else {\n        leads = await storage.getAllLeads();\n      }\n      res.json(leads);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch leads\" });\n    }\n  });\n\n  app.get(\"/api/leads/:id\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const lead = await storage.getLead(req.params.id);\n      if (!lead) {\n        return res.status(404).json({ message: \"Lead not found\" });\n      }\n      res.json(lead);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch lead\" });\n    }\n  });\n\n  app.post(\"/api/leads\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      const dataWithTenant = { ...req.body, tenantId: req.user.tenantId };\n      const validated = insertLeadSchema.parse(dataWithTenant);\n      const lead = await storage.createLead(validated);\n      res.status(201).json(lead);\n    } catch (error: any) {\n      console.error(\"Lead creation validation error:\", error);\n      res.status(400).json({ message: error.message || \"Invalid data\" });\n    }\n  });\n\n  app.put(\"/api/leads/:id\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const validated = insertLeadSchema.partial().parse(req.body);\n      const lead = await storage.updateLead(req.params.id, validated);\n      if (!lead) {\n        return res.status(404).json({ message: \"Lead not found\" });\n      }\n      res.json(lead);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid data\" });\n    }\n  });\n\n  app.delete(\"/api/leads/:id\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const deleted = await storage.deleteLead(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Lead not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete lead\" });\n    }\n  });\n\n  // Lead Workflow Transitions\n  app.post(\"/api/leads/:id/qualify\", async (req: AuthRequest, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      if (req.user.role !== 'master_admin' && req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Only admins can qualify leads\" });\n      }\n      const lead = await storage.qualifyLead(req.params.id, req.user.tenantId);\n      if (!lead) {\n        return res.status(404).json({ message: \"Lead not found\" });\n      }\n      res.json(lead);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Failed to qualify lead\" });\n    }\n  });\n\n  app.post(\"/api/leads/:id/start-progress\", async (req: AuthRequest, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      if (req.user.role !== 'master_admin' && req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Only admins can start lead progress\" });\n      }\n      const lead = await storage.startLeadProgress(req.params.id, req.user.tenantId);\n      if (!lead) {\n        return res.status(404).json({ message: \"Lead not found\" });\n      }\n      res.json(lead);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Failed to start lead progress\" });\n    }\n  });\n\n  app.post(\"/api/leads/:id/convert\", async (req: AuthRequest, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      if (req.user.role !== 'master_admin' && req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Only admins can convert leads\" });\n      }\n      const lead = await storage.convertLead(req.params.id, req.user.tenantId);\n      if (!lead) {\n        return res.status(404).json({ message: \"Lead not found\" });\n      }\n      res.json(lead);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Failed to convert lead\" });\n    }\n  });\n\n  app.post(\"/api/leads/:id/close\", async (req: AuthRequest, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      if (req.user.role !== 'master_admin' && req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Only admins can close leads\" });\n      }\n      const lead = await storage.closeLead(req.params.id, req.user.tenantId);\n      if (!lead) {\n        return res.status(404).json({ message: \"Lead not found\" });\n      }\n      res.json(lead);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Failed to close lead\" });\n    }\n  });\n\n  // Files\n  app.get(\"/api/files\", async (req, res) => {\n    try {\n      const { entityType, entityId } = req.query;\n      if (!entityType || !entityId) {\n        return res.status(400).json({ message: \"entityType and entityId are required\" });\n      }\n      const files = await storage.getFilesByEntity(entityType as string, entityId as string);\n      res.json(files);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch files\" });\n    }\n  });\n\n  app.post(\"/api/files\", async (req, res) => {\n    try {\n      const validated = insertFileSchema.parse(req.body);\n      const file = await storage.createFile(validated);\n      res.status(201).json(file);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid data\" });\n    }\n  });\n\n  app.delete(\"/api/files/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteFile(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"File not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete file\" });\n    }\n  });\n\n  // Follow-up Actions\n  app.get(\"/api/follow-up-actions\", async (req, res) => {\n    try {\n      const { auditId } = req.query;\n      if (!auditId) {\n        return res.status(400).json({ message: \"auditId is required\" });\n      }\n      const actions = await storage.getFollowUpActionsByAudit(auditId as string);\n      res.json(actions);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch follow-up actions\" });\n    }\n  });\n\n  app.post(\"/api/follow-up-actions\", async (req, res) => {\n    try {\n      const validated = insertFollowUpActionSchema.parse(req.body);\n      const action = await storage.createFollowUpAction(validated);\n      res.status(201).json(action);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid data\" });\n    }\n  });\n\n  app.put(\"/api/follow-up-actions/:id\", async (req, res) => {\n    try {\n      const validated = insertFollowUpActionSchema.partial().parse(req.body);\n      const action = await storage.updateFollowUpAction(req.params.id, validated);\n      if (!action) {\n        return res.status(404).json({ message: \"Follow-up action not found\" });\n      }\n      res.json(action);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid data\" });\n    }\n  });\n\n  app.delete(\"/api/follow-up-actions/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteFollowUpAction(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Follow-up action not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete follow-up action\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":34669},"client/src/components/examples/LeadKanban.tsx":{"content":"import { LeadKanban } from \"../LeadKanban\";\n\nexport default function LeadKanbanExample() {\n  return (\n    <div className=\"p-4\">\n      <LeadKanban />\n    </div>\n  );\n}\n","size_bytes":167},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-11 on mobile (44px touch target), h-9 on desktop to match buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-11 md:h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":874},"client/src/components/examples/RecentActivityTable.tsx":{"content":"import { RecentActivityTable } from \"../RecentActivityTable\";\n\nexport default function RecentActivityTableExample() {\n  return (\n    <div className=\"p-4\">\n      <RecentActivityTable />\n    </div>\n  );\n}\n","size_bytes":203},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 h-11 w-11 md:h-auto md:w-auto rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4311},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"client/src/components/examples/ThemeToggle.tsx":{"content":"import { ThemeToggle } from \"../ThemeToggle\";\n\nexport default function ThemeToggleExample() {\n  return (\n    <div className=\"p-4 flex items-center justify-center\">\n      <ThemeToggle />\n    </div>\n  );\n}\n","size_bytes":204},"client/src/pages/Reports.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { BarChart, Bar, PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { TrendingUp, Users, BarChart3, PieChart as PieChartIcon, DollarSign, Download } from \"lucide-react\";\nimport { useAuth } from \"@/lib/authContext\";\n\nconst CHART_COLORS = [\n  'hsl(var(--chart-1))',\n  'hsl(var(--chart-2))',\n  'hsl(var(--chart-3))',\n  'hsl(var(--chart-4))',\n  'hsl(var(--chart-5))',\n];\n\ninterface AuditReports {\n  auditsByStatus: { status: string; count: number }[];\n  auditsByIndustry: { industryName: string; count: number }[];\n  auditsByType: { auditTypeName: string; count: number }[];\n  totalAudits: number;\n}\n\ninterface LeadReports {\n  leadsByStatus: { status: string; count: number }[];\n  leadsByIndustry: { industryName: string; count: number }[];\n  leadsByPriority: { priority: string; count: number }[];\n  conversionRate: number;\n  totalEstimatedValue: number;\n  totalLeads: number;\n}\n\nexport default function Reports() {\n  const { accessToken } = useAuth();\n\n  const { data: auditReports, isLoading: auditLoading } = useQuery<AuditReports>({\n    queryKey: ['/api/reports/audits'],\n  });\n\n  const { data: leadReports, isLoading: leadLoading } = useQuery<LeadReports>({\n    queryKey: ['/api/reports/leads'],\n  });\n\n  const isLoading = auditLoading || leadLoading;\n\n  const handleExportAudits = async () => {\n    try {\n      const response = await fetch('/api/reports/audits/export/csv', {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n        },\n      });\n      \n      if (!response.ok) throw new Error('Export failed');\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'audit-reports.csv';\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    } catch (error) {\n      console.error('Failed to export audit reports:', error);\n    }\n  };\n\n  const handleExportLeads = async () => {\n    try {\n      const response = await fetch('/api/reports/leads/export/csv', {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n        },\n      });\n      \n      if (!response.ok) throw new Error('Export failed');\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'lead-reports.csv';\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    } catch (error) {\n      console.error('Failed to export lead reports:', error);\n    }\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(value);\n  };\n\n  const formatStatus = (status: string) => {\n    return status\n      .split('_')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ');\n  };\n\n  const formatPriority = (priority: string) => {\n    return priority.charAt(0).toUpperCase() + priority.slice(1);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-start flex-wrap gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-semibold\" data-testid=\"heading-reports\">\n            Reports & Analytics\n          </h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Comprehensive metrics and insights for audits and leads\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleExportAudits}\n            data-testid=\"button-export-audits\"\n          >\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export Audits\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleExportLeads}\n            data-testid=\"button-export-leads\"\n          >\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export Leads\n          </Button>\n        </div>\n      </div>\n\n      {isLoading ? (\n        <div className=\"text-center py-12 text-muted-foreground\">\n          Loading reports...\n        </div>\n      ) : (\n        <>\n          {/* Lead Metrics Summary */}\n          <div>\n            <h2 className=\"text-xl font-semibold mb-4\">Lead Performance</h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <Card data-testid=\"card-total-leads\">\n                <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Total Leads</CardTitle>\n                  <Users className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{leadReports?.totalLeads || 0}</div>\n                </CardContent>\n              </Card>\n\n              <Card data-testid=\"card-conversion-rate\">\n                <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Conversion Rate</CardTitle>\n                  <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{leadReports?.conversionRate || 0}%</div>\n                </CardContent>\n              </Card>\n\n              <Card data-testid=\"card-total-value\">\n                <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Total Est. Value</CardTitle>\n                  <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">\n                    {formatCurrency(leadReports?.totalEstimatedValue || 0)}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card data-testid=\"card-total-audits\">\n                <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Total Audits</CardTitle>\n                  <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{auditReports?.totalAudits || 0}</div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* Charts Row 1: Leads */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card data-testid=\"chart-leads-by-status\">\n              <CardHeader>\n                <CardTitle>Leads by Status</CardTitle>\n                <CardDescription>Distribution of leads across different stages</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <BarChart data={leadReports?.leadsByStatus || []}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis \n                      dataKey=\"status\" \n                      tickFormatter={formatStatus}\n                      angle={-45}\n                      textAnchor=\"end\"\n                      height={80}\n                    />\n                    <YAxis />\n                    <Tooltip \n                      labelFormatter={formatStatus}\n                      contentStyle={{ backgroundColor: 'hsl(var(--background))', border: '1px solid hsl(var(--border))' }}\n                    />\n                    <Bar dataKey=\"count\" fill={CHART_COLORS[0]} />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"chart-leads-by-priority\">\n              <CardHeader>\n                <CardTitle>Leads by Priority</CardTitle>\n                <CardDescription>Priority distribution of active leads</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <PieChart>\n                    <Pie\n                      data={leadReports?.leadsByPriority || []}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ priority, percent }) => \n                        `${formatPriority(priority)}: ${(percent * 100).toFixed(0)}%`\n                      }\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"count\"\n                      nameKey=\"priority\"\n                    >\n                      {leadReports?.leadsByPriority?.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={CHART_COLORS[index % CHART_COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <Tooltip \n                      labelFormatter={formatPriority}\n                      contentStyle={{ backgroundColor: 'hsl(var(--background))', border: '1px solid hsl(var(--border))' }}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Charts Row 2: Audits */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card data-testid=\"chart-audits-by-status\">\n              <CardHeader>\n                <CardTitle>Audits by Status</CardTitle>\n                <CardDescription>Current audit workflow distribution</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <BarChart data={auditReports?.auditsByStatus || []}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis \n                      dataKey=\"status\" \n                      tickFormatter={formatStatus}\n                      angle={-45}\n                      textAnchor=\"end\"\n                      height={80}\n                    />\n                    <YAxis />\n                    <Tooltip \n                      labelFormatter={formatStatus}\n                      contentStyle={{ backgroundColor: 'hsl(var(--background))', border: '1px solid hsl(var(--border))' }}\n                    />\n                    <Bar dataKey=\"count\" fill={CHART_COLORS[1]} />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"chart-audits-by-type\">\n              <CardHeader>\n                <CardTitle>Audits by Type</CardTitle>\n                <CardDescription>Distribution across audit types</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <PieChart>\n                    <Pie\n                      data={auditReports?.auditsByType || []}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ auditTypeName, percent }) => \n                        `${auditTypeName}: ${(percent * 100).toFixed(0)}%`\n                      }\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"count\"\n                      nameKey=\"auditTypeName\"\n                    >\n                      {auditReports?.auditsByType?.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={CHART_COLORS[index % CHART_COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <Tooltip \n                      contentStyle={{ backgroundColor: 'hsl(var(--background))', border: '1px solid hsl(var(--border))' }}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Charts Row 3: Industry Distribution */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card data-testid=\"chart-leads-by-industry\">\n              <CardHeader>\n                <CardTitle>Leads by Industry</CardTitle>\n                <CardDescription>Lead distribution across industries</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <BarChart data={leadReports?.leadsByIndustry || []}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis \n                      dataKey=\"industryName\"\n                      angle={-45}\n                      textAnchor=\"end\"\n                      height={80}\n                    />\n                    <YAxis />\n                    <Tooltip \n                      contentStyle={{ backgroundColor: 'hsl(var(--background))', border: '1px solid hsl(var(--border))' }}\n                    />\n                    <Bar dataKey=\"count\" fill={CHART_COLORS[2]} />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"chart-audits-by-industry\">\n              <CardHeader>\n                <CardTitle>Audits by Industry</CardTitle>\n                <CardDescription>Audit distribution across industries</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <BarChart data={auditReports?.auditsByIndustry || []}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis \n                      dataKey=\"industryName\"\n                      angle={-45}\n                      textAnchor=\"end\"\n                      height={80}\n                    />\n                    <YAxis />\n                    <Tooltip \n                      contentStyle={{ backgroundColor: 'hsl(var(--background))', border: '1px solid hsl(var(--border))' }}\n                    />\n                    <Bar dataKey=\"count\" fill={CHART_COLORS[3]} />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n","size_bytes":14864},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/examples/AuditFormWizard.tsx":{"content":"import { AuditFormWizard } from \"../AuditFormWizard\";\n\nexport default function AuditFormWizardExample() {\n  return (\n    <div className=\"p-4 max-w-4xl mx-auto\">\n      <AuditFormWizard />\n    </div>\n  );\n}\n","size_bytes":205},"client/src/pages/examples/Login.tsx":{"content":"import Login from \"../Login\";\n\nexport default function LoginExample() {\n  return <Login />;\n}\n","size_bytes":94},"client/src/pages/Leads.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus, LayoutGrid, List, CheckCircle, PlayCircle, XCircle, TrendingUp } from \"lucide-react\";\nimport { LeadKanban } from \"@/components/LeadKanban\";\nimport { CreateLeadDialog } from \"@/components/CreateLeadDialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport type { Lead } from \"@shared/schema\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Leads() {\n  const [view, setView] = useState<\"kanban\" | \"table\">(\"kanban\");\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const { toast } = useToast();\n\n  const { data: leads = [], isLoading } = useQuery<Lead[]>({\n    queryKey: [\"/api/leads\"],\n  });\n\n  const qualifyMutation = useMutation({\n    mutationFn: (leadId: string) => apiRequest(\"POST\", `/api/leads/${leadId}/qualify`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n      toast({ title: \"Success\", description: \"Lead qualified\" });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message || \"Failed to qualify lead\", variant: \"destructive\" });\n    },\n  });\n\n  const startProgressMutation = useMutation({\n    mutationFn: (leadId: string) => apiRequest(\"POST\", `/api/leads/${leadId}/start-progress`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n      toast({ title: \"Success\", description: \"Lead moved to in progress\" });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message || \"Failed to start progress\", variant: \"destructive\" });\n    },\n  });\n\n  const convertMutation = useMutation({\n    mutationFn: (leadId: string) => apiRequest(\"POST\", `/api/leads/${leadId}/convert`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n      toast({ title: \"Success\", description: \"Lead converted successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message || \"Failed to convert lead\", variant: \"destructive\" });\n    },\n  });\n\n  const closeMutation = useMutation({\n    mutationFn: (leadId: string) => apiRequest(\"POST\", `/api/leads/${leadId}/close`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n      toast({ title: \"Success\", description: \"Lead closed\" });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message || \"Failed to close lead\", variant: \"destructive\" });\n    },\n  });\n\n  const canQualify = (lead: Lead) => lead.status === 'new';\n  const canStartProgress = (lead: Lead) => lead.status === 'qualified';\n  const canConvert = (lead: Lead) => lead.status === 'in_progress';\n  const canClose = (lead: Lead) => lead.status !== 'converted' && lead.status !== 'closed';\n\n  const getPriorityVariant = (priority: string) => {\n    switch (priority) {\n      case \"urgent\":\n        return \"destructive\";\n      case \"high\":\n        return \"default\";\n      case \"medium\":\n        return \"secondary\";\n      case \"low\":\n        return \"outline\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  const formatStatus = (status: string) => {\n    return status.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n  };\n\n  const formatPriority = (priority: string) => {\n    return priority.charAt(0).toUpperCase() + priority.slice(1);\n  };\n\n  const formatCurrency = (value: number | null) => {\n    if (value === null) return \"N/A\";\n    return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(value);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-semibold\" data-testid=\"heading-leads\">\n            Lead Management\n          </h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Track and convert leads from audits\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button onClick={() => setIsCreateOpen(true)} data-testid=\"button-add-lead\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Lead\n          </Button>\n          <Tabs value={view} onValueChange={(v) => setView(v as \"kanban\" | \"table\")}>\n            <TabsList>\n              <TabsTrigger value=\"kanban\" data-testid=\"button-view-kanban\">\n                <LayoutGrid className=\"h-4 w-4 mr-2\" />\n                Kanban\n              </TabsTrigger>\n              <TabsTrigger value=\"table\" data-testid=\"button-view-table\">\n                <List className=\"h-4 w-4 mr-2\" />\n                Table\n              </TabsTrigger>\n            </TabsList>\n          </Tabs>\n          <Button data-testid=\"button-create-lead\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Create Lead\n          </Button>\n        </div>\n      </div>\n\n      {view === \"kanban\" ? (\n        <LeadKanban />\n      ) : (\n        <>\n          {isLoading ? (\n            <div className=\"flex items-center justify-center py-12\">\n              <p className=\"text-muted-foreground\">Loading leads...</p>\n            </div>\n          ) : leads.length === 0 ? (\n            <div className=\"flex flex-col items-center justify-center py-12 text-center\">\n              <p className=\"text-muted-foreground\">No leads found</p>\n              <p className=\"text-sm text-muted-foreground mt-1\">Create your first lead to get started</p>\n            </div>\n          ) : (\n            <>\n              {/* Mobile Card View */}\n              <div className=\"md:hidden space-y-3\">\n                {leads.map((lead) => (\n                  <Card key={lead.id} data-testid={`card-lead-${lead.id}`} className=\"hover-elevate\">\n                    <CardContent className=\"p-4 space-y-3\">\n                      <div className=\"flex items-start justify-between gap-3\">\n                        <div className=\"flex-1 min-w-0\">\n                          <p className=\"font-mono text-sm font-medium\" data-testid={`text-lead-id-${lead.id}`}>{lead.leadNumber}</p>\n                          <p className=\"text-lg font-semibold mt-1\" data-testid={`text-company-${lead.id}`}>{lead.companyName}</p>\n                          <p className=\"text-sm text-muted-foreground mt-0.5\" data-testid={`text-contact-${lead.id}`}>{lead.contactPerson}</p>\n                        </div>\n                        <div className=\"flex flex-col gap-2 items-end\">\n                          <Badge variant=\"outline\" data-testid={`badge-status-${lead.id}`}>\n                            {formatStatus(lead.status)}\n                          </Badge>\n                          <Badge variant={getPriorityVariant(lead.priority)} data-testid={`badge-priority-${lead.id}`}>\n                            {formatPriority(lead.priority)}\n                          </Badge>\n                        </div>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                        <div>\n                          <p className=\"text-muted-foreground\">Value</p>\n                          <p className=\"font-semibold mt-0.5\" data-testid={`text-value-${lead.id}`}>\n                            {formatCurrency(lead.estimatedValue)}\n                          </p>\n                        </div>\n                        <div>\n                          <p className=\"text-muted-foreground\">Email</p>\n                          <p className=\"font-medium mt-0.5 truncate\" data-testid={`text-email-${lead.id}`}>{lead.email}</p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex justify-end gap-2 pt-2 border-t flex-wrap\">\n                        {canQualify(lead) && (\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            onClick={() => qualifyMutation.mutate(lead.id)}\n                            disabled={qualifyMutation.isPending}\n                            data-testid={`button-qualify-${lead.id}`}\n                          >\n                            <CheckCircle className=\"h-4 w-4 mr-1\" />\n                            Qualify\n                          </Button>\n                        )}\n                        {canStartProgress(lead) && (\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            onClick={() => startProgressMutation.mutate(lead.id)}\n                            disabled={startProgressMutation.isPending}\n                            data-testid={`button-start-progress-${lead.id}`}\n                          >\n                            <PlayCircle className=\"h-4 w-4 mr-1\" />\n                            Start\n                          </Button>\n                        )}\n                        {canConvert(lead) && (\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            onClick={() => convertMutation.mutate(lead.id)}\n                            disabled={convertMutation.isPending}\n                            data-testid={`button-convert-${lead.id}`}\n                          >\n                            <TrendingUp className=\"h-4 w-4 mr-1\" />\n                            Convert\n                          </Button>\n                        )}\n                        {canClose(lead) && (\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            onClick={() => closeMutation.mutate(lead.id)}\n                            disabled={closeMutation.isPending}\n                            data-testid={`button-close-${lead.id}`}\n                          >\n                            <XCircle className=\"h-4 w-4 mr-1\" />\n                            Close\n                          </Button>\n                        )}\n                        <Button variant=\"ghost\" size=\"sm\" data-testid={`button-view-${lead.id}`}>\n                          View\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n\n              {/* Desktop Table View */}\n              <div className=\"hidden md:block overflow-x-auto\" style={{ WebkitOverflowScrolling: 'touch' }}>\n                <div className=\"rounded-lg border min-w-[800px]\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Lead ID</TableHead>\n                        <TableHead>Company</TableHead>\n                        <TableHead>Contact</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Priority</TableHead>\n                        <TableHead>Value</TableHead>\n                        <TableHead>Phone</TableHead>\n                        <TableHead className=\"text-right\">Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {leads.map((lead) => (\n                        <TableRow key={lead.id} data-testid={`row-lead-${lead.id}`}>\n                          <TableCell className=\"font-mono text-sm\">{lead.leadNumber}</TableCell>\n                          <TableCell>{lead.companyName}</TableCell>\n                          <TableCell>{lead.contactPerson}</TableCell>\n                          <TableCell>\n                            <Badge variant=\"outline\">{formatStatus(lead.status)}</Badge>\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant={getPriorityVariant(lead.priority)}>\n                              {formatPriority(lead.priority)}\n                            </Badge>\n                          </TableCell>\n                          <TableCell className=\"font-semibold\">\n                            {formatCurrency(lead.estimatedValue)}\n                          </TableCell>\n                          <TableCell>{lead.phone}</TableCell>\n                          <TableCell className=\"text-right\">\n                            <div className=\"flex justify-end gap-2\">\n                              {canQualify(lead) && (\n                                <Button \n                                  variant=\"outline\" \n                                  size=\"sm\" \n                                  onClick={() => qualifyMutation.mutate(lead.id)}\n                                  disabled={qualifyMutation.isPending}\n                                  data-testid={`button-qualify-${lead.id}`}\n                                >\n                                  <CheckCircle className=\"h-4 w-4 mr-1\" />\n                                  Qualify\n                                </Button>\n                              )}\n                              {canStartProgress(lead) && (\n                                <Button \n                                  variant=\"outline\" \n                                  size=\"sm\" \n                                  onClick={() => startProgressMutation.mutate(lead.id)}\n                                  disabled={startProgressMutation.isPending}\n                                  data-testid={`button-start-progress-${lead.id}`}\n                                >\n                                  <PlayCircle className=\"h-4 w-4 mr-1\" />\n                                  Start\n                                </Button>\n                              )}\n                              {canConvert(lead) && (\n                                <Button \n                                  variant=\"outline\" \n                                  size=\"sm\" \n                                  onClick={() => convertMutation.mutate(lead.id)}\n                                  disabled={convertMutation.isPending}\n                                  data-testid={`button-convert-${lead.id}`}\n                                >\n                                  <TrendingUp className=\"h-4 w-4 mr-1\" />\n                                  Convert\n                                </Button>\n                              )}\n                              {canClose(lead) && (\n                                <Button \n                                  variant=\"outline\" \n                                  size=\"sm\" \n                                  onClick={() => closeMutation.mutate(lead.id)}\n                                  disabled={closeMutation.isPending}\n                                  data-testid={`button-close-${lead.id}`}\n                                >\n                                  <XCircle className=\"h-4 w-4 mr-1\" />\n                                  Close\n                                </Button>\n                              )}\n                              <Button variant=\"ghost\" size=\"sm\" data-testid={`button-view-${lead.id}`}>\n                                View\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              </div>\n            </>\n          )}\n        </>\n      )}\n\n      {/* Create Lead Dialog */}\n      <CreateLeadDialog open={isCreateOpen} onOpenChange={setIsCreateOpen} />\n    </div>\n  );\n}\n","size_bytes":15919},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      // Mobile-first sizing ensures 44x44px minimum touch targets for accessibility\n      size: {\n        default: \"min-h-11 md:min-h-9 px-4 py-2\",\n        sm: \"min-h-11 md:min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-11 md:min-h-10 rounded-md px-8\",\n        icon: \"h-11 w-11 md:h-9 md:w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2496},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-11 w-11 md:h-7 md:w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-11 md:h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 md:top-3.5 right-3 md:right-3 flex h-11 w-11 md:h-5 md:w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"min-h-11 md:min-h-8 text-sm\",\n        sm: \"min-h-11 md:min-h-7 text-xs\",\n        lg: \"min-h-11 md:min-h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 md:top-1.5 right-1 md:right-1 flex h-11 w-11 md:h-5 md:w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"peer-data-[size=sm]/menu-button:top-1 md:peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5 md:peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5 md:peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-11 md:h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21882},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/examples/LeadConversionChart.tsx":{"content":"import { LeadConversionChart } from \"../LeadConversionChart\";\n\nexport default function LeadConversionChartExample() {\n  return (\n    <div className=\"p-4\">\n      <LeadConversionChart />\n    </div>\n  );\n}\n","size_bytes":203},"replit.md":{"content":"# Audit Lifecycle Management Platform\n\n## Overview\n\nThis is a comprehensive web-based audit and lead management platform designed for enterprise auditors and channel partners. The system supports planning, executing, and reporting audits across industries (Pharma, Chemical, etc.) while managing the complete lead lifecycle from generation to conversion. The platform features a modern, data-focused enterprise UI with real-time dashboards, configurable workflows, and master data management capabilities.\n\n## Recent Changes (October 2025)\n\n### Multi-Tenant SaaS Transformation\n- ✅ Implemented multi-tenant architecture with tenant isolation across all entities\n- ✅ Built comprehensive authentication system with JWT tokens, password hashing (bcrypt)\n- ✅ **Updated role-based authorization (master_admin, admin, client, auditor)**\n- ✅ Secured all API routes with authentication middleware and role-based access control\n- ✅ Added unique constraints on users.username and users.email for security\n- ✅ Built Login/Register UI with AuthContext and protected route handling\n- ✅ **Implemented RoleGuard component for granular route protection**\n- ✅ **Role-based sidebar navigation (shows/hides items based on user role)**\n- ✅ **Profile badge in sidebar displaying current user role**\n\n### Workflow State Machines (Architect-Approved)\n- ✅ **Audit Workflow**: Draft → Review → Approved → Closed\n  - Storage methods with state validation and tenant isolation\n  - API endpoints with admin-only authorization (master_admin + admin) for approve/reject/close\n  - Frontend conditional workflow buttons based on status and user role\n  \n- ✅ **Lead Workflow**: New → Qualified → In Progress → Converted → Closed\n  - Storage methods with state validation and tenant isolation\n  - API endpoints with role-based authorization (master_admin + admin only)\n  - Frontend conditional workflow buttons based on status and user role\n\n### Master Data Management\n- ✅ Built Settings UI with tabbed interface (Users, Industries, Audit Types)\n- ✅ Implemented full CRUD operations with multi-tenant security\n- ✅ Global unique constraints on usernames/emails while maintaining tenant isolation\n\n### Current Status\n**Backend**: ✅ Production-ready PostgreSQL with workflow state machines, RBAC, and secure reports\n**Frontend**: ✅ All pages with role-based protection, dynamic navigation, and workflow UI\n**Security**: ✅ Multi-tenant isolation + comprehensive RBAC enforced at all layers (frontend + backend)\n**Features**: ✅ Auth, ✅ Workflows, ✅ Master Data, ✅ Secure Reports, ✅ CSV Export\n**Testing**: ✅ Comprehensive RBAC security tests passed (all roles verified)\n**Production Ready**: ✅ Enterprise-grade multi-tenant SaaS platform with complete security\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Test Credentials\n\nThe platform includes demo accounts for all roles:\n\n1. **Master Admin** (Full System Access)\n   - Email: admin@example.com\n   - Password: admin123\n   - Access: All pages and features\n\n2. **Admin** (Management Access)\n   - Email: admin_user@example.com\n   - Password: demo123\n   - Access: Dashboard, Audits, Leads, Reports, Settings\n\n3. **Client** (Limited Access)\n   - Email: client_user@example.com\n   - Password: demo123\n   - Access: Dashboard, Audits, Leads\n\n4. **Auditor** (Audit Only)\n   - Email: auditor_user@example.com\n   - Password: demo123\n   - Access: Dashboard, Audits\n\n## System Architecture\n\n### Frontend Architecture\n\n**Technology Stack:**\n- **Framework:** React with TypeScript using Vite as the build tool\n- **Routing:** Wouter (lightweight client-side routing)\n- **UI Component Library:** Radix UI primitives with shadcn/ui design system\n- **Styling:** Tailwind CSS with custom design tokens\n- **State Management:** TanStack Query (React Query) for server state\n- **Form Handling:** React Hook Form with Zod validation\n- **Charts/Visualization:** Recharts for dashboards and reports\n\n**Design Principles:**\n- **Linear-inspired clean enterprise UI** with data clarity as priority\n- **Mobile-first responsive design** with 44x44px minimum touch targets\n- **Dark/light mode support** using CSS variables and class-based theming\n- **Accessibility-focused** with proper ARIA labels and keyboard navigation\n- Inter font family for UI with JetBrains Mono for monospaced data fields\n\n**Component Structure:**\n- Reusable UI components in `/client/src/components/ui` (shadcn/ui pattern)\n- Feature-specific components for audits, leads, and dashboards\n- Page-level components in `/client/src/pages`\n- Custom hooks in `/client/src/hooks`\n\n### Backend Architecture\n\n**Technology Stack:**\n- **Runtime:** Node.js with TypeScript\n- **Framework:** Express.js for REST API\n- **Database:** PostgreSQL (Neon serverless) with Drizzle ORM\n- **Session Management:** Connect-pg-simple for PostgreSQL-backed sessions\n- **Build Tool:** esbuild for production bundling\n\n**API Design:**\n- RESTful API structure with `/api` prefix for all routes\n- CRUD operations abstracted through storage interface pattern\n- Request/response logging middleware for debugging\n- Error handling middleware with proper HTTP status codes (404/500)\n- Zod schema validation on all mutating routes\n\n**Storage Layer:**\n- Interface-based storage abstraction (`IStorage`) in `/server/storage.ts`\n- **Current implementation:** PostgreSQL via Drizzle ORM (production-ready)\n- Full CRUD operations for all entities:\n  - Users (with role-based access)\n  - Audits (with customer, industry, audit type relations)\n  - Leads (with status tracking and priority)\n  - Industries (master data)\n  - Audit Types (master data)\n  - Checklists & Templates\n  - Observations & Follow-ups\n  - Files & Attachments\n\n### Database Schema\n\n**ORM Configuration:**\n- Drizzle ORM configured for PostgreSQL dialect\n- Schema defined in `/shared/schema.ts` for shared type safety\n- Zod integration for runtime validation (drizzle-zod)\n- Database push workflow using `npm run db:push`\n\n**Complete Schema (11 Core Tables):**\n\n1. **users** - User accounts with roles (master_admin, admin, client, auditor)\n   - Fields: id (UUID), username, password, fullName, email, role, createdAt\n   \n2. **industries** - Industry master data\n   - Fields: id (UUID), name, description, createdAt\n   - Seeded: Manufacturing, Healthcare, Finance, Retail, Technology\n\n3. **audit_types** - Audit type master data\n   - Fields: id (UUID), name, description, createdAt\n   - Seeded: ISO 9001, ISO 14001, OHSAS 18001, ISO 27001, ISO 22000\n\n4. **audits** - Core audit records\n   - Fields: id (UUID), auditNumber, customerName, customerId, industryId, auditTypeId, status, plannedStartDate, plannedEndDate, actualStartDate, actualEndDate, location, leadAuditor, auditTeam, findings, recommendations, createdAt\n   - Relations: industry, auditType\n\n5. **leads** - Lead management\n   - Fields: id (UUID), companyName, contactPerson, email, phone, industryId, status (new/contacted/qualified/converted), priority, source, estimatedValue, notes, assignedTo, createdAt, convertedDate\n   - Relations: industry\n\n6. **checklists** - Checklist templates\n   - Fields: id (UUID), name, description, auditTypeId, isTemplate, createdAt\n   - Relations: auditType\n\n7. **checklist_items** - Individual checklist questions\n   - Fields: id (UUID), checklistId, questionText, category, expectedEvidence, sortOrder\n   - Relations: checklist\n\n8. **audit_checklist_responses** - Audit responses to checklist items\n   - Fields: id (UUID), auditId, checklistItemId, response (compliant/non_compliant/not_applicable), evidence, notes, respondedBy, respondedAt\n   - Relations: audit, checklistItem\n\n9. **observations** - Audit observations and findings\n   - Fields: id (UUID), auditId, observationType (finding/opportunity/strength), severity, description, evidenceDescription, responsiblePerson, targetDate, status, createdAt\n   - Relations: audit\n\n10. **business_intelligence** - BI metrics and analytics\n    - Fields: id (UUID), metricType, metricValue, dimensionType, dimensionValue, periodStart, periodEnd, createdAt\n\n11. **files** - File attachments\n    - Fields: id (UUID), entityType, entityId, fileName, fileUrl, fileType, fileSize, uploadedBy, uploadedAt\n\n### API Endpoints\n\n**Dashboard:**\n- `GET /api/stats` - Returns real-time stats (total audits, active leads, completed checklists)\n\n**Audits:**\n- `GET /api/audits` - List all audits with relations\n- `GET /api/audits/:id` - Get single audit details\n- (POST/PATCH/DELETE planned for full CRUD)\n\n**Leads:**\n- `GET /api/leads` - List all leads with relations\n- `GET /api/leads/:id` - Get single lead details\n- (POST/PATCH/DELETE planned for full CRUD)\n\n**Master Data:**\n- `GET /api/users` - List all users\n- `GET /api/users/:id` - Get single user\n- `GET /api/industries` - List all industries\n- `GET /api/industries/:id` - Get single industry\n- `GET /api/audit-types` - List all audit types\n- `GET /api/audit-types/:id` - Get single audit type\n- (POST/PATCH/DELETE planned for full CRUD)\n\n### Authentication & Session Management\n\n**Current Implementation:**\n- User authentication structure in place with username/password schema\n- Session-based authentication using PostgreSQL-backed sessions\n- User roles: admin, auditor, sales_rep\n\n**Planned Enhancements:**\n- Password hashing implementation\n- Role-based access control for different user types\n- Session timeout and security hardening\n\n### Application Structure\n\n**Monorepo Organization:**\n- `/client` - React frontend application\n- `/server` - Express.js backend\n- `/shared` - Shared TypeScript types and schemas\n- `/attached_assets` - Project documentation and requirements\n\n**Development Workflow:**\n- Development server with HMR using Vite middleware\n- TypeScript strict mode enabled across all modules\n- Path aliases configured: `@/` for client, `@shared/` for shared code\n- Build process: Vite for frontend, esbuild for backend bundling\n\n### Key Features Implementation\n\n**Dashboard (✅ Complete):**\n- Real-time KPI cards with trend indicators (total audits, active leads, completed checklists)\n- Recent audits table with customer, audit type, and status\n- Lead pipeline Kanban board preview\n- All data sourced from live PostgreSQL backend\n\n**Audit Management (✅ Complete - Read Operations):**\n- Comprehensive audits table with filtering\n- Audit cards for mobile view\n- Status tracking with visual indicators\n- Customer, industry, and audit type relations\n- Planned: Multi-step wizard form for audit creation\n\n**Lead Management (✅ Complete - Read Operations):**\n- Kanban board view for visual pipeline management (New → Contacted → Qualified → Converted)\n- Table view for detailed lead information\n- Lead cards with contact information and status\n- Priority and source tracking\n- Planned: Lead conversion workflow, assignment tracking\n\n**Master Data Management (✅ Complete - Read Operations):**\n- Tabbed interface for managing:\n  - ✅ Users (with roles and permissions)\n  - ✅ Industry types\n  - ✅ Audit types\n  - Planned: Checklist templates, custom fields\n\n**Planned Features:**\n- Document/photo upload capability for audits\n- Geo-location integration for site audits\n- Email notifications and alerts\n- Advanced reporting and analytics\n- Mobile app integration\n\n## External Dependencies\n\n### Core Infrastructure\n- **Neon Database:** Serverless PostgreSQL database with WebSocket support\n- **Replit Platform:** Development and deployment environment with built-in database provisioning\n\n### UI & Styling\n- **Radix UI:** Headless component primitives (20+ components)\n- **Tailwind CSS:** Utility-first CSS framework with custom configuration\n- **Recharts:** React charting library for dashboards\n- **Lucide React:** Icon library\n- **class-variance-authority:** Component variant management\n- **tailwind-merge:** Intelligent Tailwind class merging\n\n### Forms & Validation\n- **React Hook Form:** Form state management\n- **Zod:** TypeScript-first schema validation\n- **@hookform/resolvers:** Zod resolver for React Hook Form\n\n### Data Management\n- **TanStack Query:** Server state management and caching\n- **Drizzle ORM:** TypeScript ORM for PostgreSQL\n- **drizzle-zod:** Zod schema generation from Drizzle schemas\n\n### Development Tools\n- **Vite:** Fast build tool and dev server\n- **tsx:** TypeScript execution for development\n- **Replit plugins:** Runtime error overlay, cartographer, dev banner\n\n### Routing & Navigation\n- **Wouter:** Lightweight client-side routing (~1.2KB)\n\n### Future Integration Points\n- **CRM Integration:** Planned for lead management\n- **Email Service (SMTP):** For automated notifications and alerts\n- **Geo-location API:** For audit site tracking\n- **File Upload Service:** For photos and documents\n- **Mobile App (Flutter):** Cross-platform mobile companion app (planned)\n\n## Next Steps (Post-Demo)\n\n1. **Full CRUD Operations**: Add POST/PATCH/DELETE endpoints and frontend mutations for:\n   - User management\n   - Audit creation and editing\n   - Lead management workflow\n   - Master data configuration\n\n2. **Enhanced Features**:\n   - File upload and attachment management\n   - Advanced search and filtering\n   - Bulk operations\n   - Export functionality (PDF reports, Excel)\n\n3. **Testing & Quality**:\n   - Integration tests for all API endpoints\n   - Extended E2E test coverage\n   - Performance optimization\n   - Security hardening\n\n4. **Production Deployment**:\n   - Environment-specific configuration\n   - Logging and monitoring setup\n   - Error tracking (Sentry integration)\n   - Database backup strategy\n","size_bytes":13537},"server/auth.ts":{"content":"import jwt from \"jsonwebtoken\";\nimport bcrypt from \"bcrypt\";\nimport { Request, Response, NextFunction } from \"express\";\nimport type { User } from \"@shared/schema\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-secret-key-change-in-production\";\nconst REFRESH_SECRET = process.env.REFRESH_SECRET || \"your-refresh-secret-key-change-in-production\";\n\nexport interface TokenPayload {\n  userId: string;\n  tenantId: string;\n  email: string;\n  role: string;\n}\n\nexport interface AuthRequest extends Request {\n  user?: TokenPayload;\n}\n\n// Generate access token (15 minutes)\nexport function generateAccessToken(user: User): string {\n  const payload: TokenPayload = {\n    userId: user.id,\n    tenantId: user.tenantId,\n    email: user.email,\n    role: user.role,\n  };\n  \n  return jwt.sign(payload, JWT_SECRET, { expiresIn: \"15m\" });\n}\n\n// Generate refresh token (7 days)\nexport function generateRefreshToken(user: User): string {\n  const payload: TokenPayload = {\n    userId: user.id,\n    tenantId: user.tenantId,\n    email: user.email,\n    role: user.role,\n  };\n  \n  return jwt.sign(payload, REFRESH_SECRET, { expiresIn: \"7d\" });\n}\n\n// Verify access token\nexport function verifyAccessToken(token: string): TokenPayload | null {\n  try {\n    return jwt.verify(token, JWT_SECRET) as TokenPayload;\n  } catch (error) {\n    return null;\n  }\n}\n\n// Verify refresh token\nexport function verifyRefreshToken(token: string): TokenPayload | null {\n  try {\n    return jwt.verify(token, REFRESH_SECRET) as TokenPayload;\n  } catch (error) {\n    return null;\n  }\n}\n\n// Hash password\nexport async function hashPassword(password: string): Promise<string> {\n  return bcrypt.hash(password, 10);\n}\n\n// Compare password\nexport async function comparePassword(password: string, hash: string): Promise<boolean> {\n  return bcrypt.compare(password, hash);\n}\n\n// Auth middleware\nexport function authenticateToken(req: AuthRequest, res: Response, next: NextFunction) {\n  const authHeader = req.headers[\"authorization\"];\n  const token = authHeader && authHeader.split(\" \")[1]; // Bearer TOKEN\n\n  if (!token) {\n    return res.status(401).json({ error: \"Access token required\" });\n  }\n\n  const payload = verifyAccessToken(token);\n  \n  if (!payload) {\n    return res.status(403).json({ error: \"Invalid or expired token\" });\n  }\n\n  req.user = payload;\n  next();\n}\n\n// Role-based authorization middleware\nexport function authorizeRoles(...allowedRoles: string[]) {\n  return (req: AuthRequest, res: Response, next: NextFunction) => {\n    if (!req.user) {\n      return res.status(401).json({ error: \"Authentication required\" });\n    }\n\n    if (!allowedRoles.includes(req.user.role)) {\n      return res.status(403).json({ error: \"Insufficient permissions\" });\n    }\n\n    next();\n  };\n}\n\n// Tenant isolation middleware\nexport function ensureTenantAccess(req: AuthRequest, res: Response, next: NextFunction) {\n  if (!req.user) {\n    return res.status(401).json({ error: \"Authentication required\" });\n  }\n\n  // This middleware ensures all queries are scoped to the user's tenant\n  // The actual tenant filtering will be done in the storage layer\n  next();\n}\n","size_bytes":3109},"server/authRoutes.ts":{"content":"import { Router } from \"express\";\nimport { db } from \"./db\";\nimport * as schema from \"@shared/schema\";\nimport { eq, and } from \"drizzle-orm\";\nimport {\n  hashPassword,\n  comparePassword,\n  generateAccessToken,\n  generateRefreshToken,\n  verifyRefreshToken,\n  authenticateToken,\n  type AuthRequest,\n} from \"./auth\";\n\nconst router = Router();\n\n// Register new user\nrouter.post(\"/register\", async (req, res) => {\n  try {\n    const data = schema.registerSchema.parse(req.body);\n    \n    // Check if user already exists\n    const existingUser = await db.select().from(schema.users)\n      .where(eq(schema.users.email, data.email))\n      .limit(1);\n    \n    if (existingUser.length > 0) {\n      return res.status(400).json({ error: \"User already exists\" });\n    }\n\n    // Create tenant if tenantName provided, otherwise use default\n    let tenantId: string;\n    \n    if (data.tenantName) {\n      const [newTenant] = await db.insert(schema.tenants).values({\n        name: data.tenantName,\n        isActive: true,\n      }).returning();\n      tenantId = newTenant.id;\n    } else {\n      // Use default tenant\n      const [defaultTenant] = await db.select().from(schema.tenants)\n        .where(eq(schema.tenants.subdomain, \"default\"))\n        .limit(1);\n      \n      if (!defaultTenant) {\n        return res.status(500).json({ error: \"Default tenant not found\" });\n      }\n      tenantId = defaultTenant.id;\n    }\n\n    // Hash password\n    const hashedPassword = await hashPassword(data.password);\n\n    // Create user\n    const [newUser] = await db.insert(schema.users).values({\n      tenantId,\n      username: data.username,\n      email: data.email,\n      password: hashedPassword,\n      fullName: data.fullName,\n      role: \"auditor\", // Default role\n      isActive: true,\n    }).returning();\n\n    // Generate tokens\n    const accessToken = generateAccessToken(newUser);\n    const refreshToken = generateRefreshToken(newUser);\n\n    // Store refresh token\n    const expiresAt = new Date();\n    expiresAt.setDate(expiresAt.getDate() + 7); // 7 days\n\n    await db.insert(schema.refreshTokens).values({\n      userId: newUser.id,\n      token: refreshToken,\n      expiresAt,\n    });\n\n    // Return user data (without password) and tokens\n    const { password, ...userWithoutPassword } = newUser;\n    \n    res.json({\n      user: userWithoutPassword,\n      accessToken,\n      refreshToken,\n    });\n  } catch (error: any) {\n    console.error(\"Registration error:\", error);\n    res.status(400).json({ error: error.message || \"Registration failed\" });\n  }\n});\n\n// Login\nrouter.post(\"/login\", async (req, res) => {\n  try {\n    const data = schema.loginSchema.parse(req.body);\n\n    // Find user by email\n    const [user] = await db.select().from(schema.users)\n      .where(and(\n        eq(schema.users.email, data.email),\n        eq(schema.users.isActive, true)\n      ))\n      .limit(1);\n\n    if (!user) {\n      return res.status(401).json({ error: \"Invalid credentials\" });\n    }\n\n    // Verify password\n    const isValidPassword = await comparePassword(data.password, user.password);\n    \n    if (!isValidPassword) {\n      return res.status(401).json({ error: \"Invalid credentials\" });\n    }\n\n    // Generate tokens\n    const accessToken = generateAccessToken(user);\n    const refreshToken = generateRefreshToken(user);\n\n    // Store refresh token\n    const expiresAt = new Date();\n    expiresAt.setDate(expiresAt.getDate() + 7); // 7 days\n\n    await db.insert(schema.refreshTokens).values({\n      userId: user.id,\n      token: refreshToken,\n      expiresAt,\n    });\n\n    // Return user data (without password) and tokens\n    const { password, ...userWithoutPassword } = user;\n    \n    res.json({\n      user: userWithoutPassword,\n      accessToken,\n      refreshToken,\n    });\n  } catch (error: any) {\n    console.error(\"Login error:\", error);\n    res.status(400).json({ error: error.message || \"Login failed\" });\n  }\n});\n\n// Refresh token\nrouter.post(\"/refresh\", async (req, res) => {\n  try {\n    const { refreshToken } = req.body;\n\n    if (!refreshToken) {\n      return res.status(400).json({ error: \"Refresh token required\" });\n    }\n\n    // Verify refresh token\n    const payload = verifyRefreshToken(refreshToken);\n    \n    if (!payload) {\n      return res.status(403).json({ error: \"Invalid refresh token\" });\n    }\n\n    // Check if refresh token exists in database\n    const [storedToken] = await db.select().from(schema.refreshTokens)\n      .where(and(\n        eq(schema.refreshTokens.token, refreshToken),\n        eq(schema.refreshTokens.userId, payload.userId)\n      ))\n      .limit(1);\n\n    if (!storedToken) {\n      return res.status(403).json({ error: \"Refresh token not found\" });\n    }\n\n    // Check if token is expired\n    if (new Date() > new Date(storedToken.expiresAt)) {\n      await db.delete(schema.refreshTokens)\n        .where(eq(schema.refreshTokens.id, storedToken.id));\n      return res.status(403).json({ error: \"Refresh token expired\" });\n    }\n\n    // Get user\n    const [user] = await db.select().from(schema.users)\n      .where(eq(schema.users.id, payload.userId))\n      .limit(1);\n\n    if (!user || !user.isActive) {\n      return res.status(403).json({ error: \"User not found or inactive\" });\n    }\n\n    // Generate new access token\n    const newAccessToken = generateAccessToken(user);\n\n    res.json({\n      accessToken: newAccessToken,\n    });\n  } catch (error: any) {\n    console.error(\"Token refresh error:\", error);\n    res.status(400).json({ error: error.message || \"Token refresh failed\" });\n  }\n});\n\n// Logout\nrouter.post(\"/logout\", authenticateToken, async (req: AuthRequest, res) => {\n  try {\n    const { refreshToken } = req.body;\n\n    if (refreshToken) {\n      // Delete refresh token from database\n      await db.delete(schema.refreshTokens)\n        .where(eq(schema.refreshTokens.token, refreshToken));\n    }\n\n    res.json({ message: \"Logged out successfully\" });\n  } catch (error: any) {\n    console.error(\"Logout error:\", error);\n    res.status(500).json({ error: \"Logout failed\" });\n  }\n});\n\n// Get current user\nrouter.get(\"/me\", authenticateToken, async (req: AuthRequest, res) => {\n  try {\n    const [user] = await db.select().from(schema.users)\n      .where(eq(schema.users.id, req.user!.userId))\n      .limit(1);\n\n    if (!user) {\n      return res.status(404).json({ error: \"User not found\" });\n    }\n\n    const { password, ...userWithoutPassword } = user;\n    res.json(userWithoutPassword);\n  } catch (error: any) {\n    console.error(\"Get user error:\", error);\n    res.status(500).json({ error: \"Failed to get user\" });\n  }\n});\n\nexport default router;\n","size_bytes":6585},"client/src/lib/authContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\nimport type { User } from \"@shared/schema\";\n\ninterface AuthContextType {\n  user: User | null;\n  accessToken: string | null;\n  login: (email: string, password: string) => Promise<void>;\n  register: (email: string, password: string, fullName: string, username: string) => Promise<void>;\n  logout: () => Promise<void>;\n  isLoading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [accessToken, setAccessToken] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Check for existing token on mount\n  useEffect(() => {\n    const token = localStorage.getItem(\"accessToken\");\n    const refreshToken = localStorage.getItem(\"refreshToken\");\n    \n    if (token) {\n      setAccessToken(token);\n      fetchCurrentUser(token);\n    } else {\n      setIsLoading(false);\n    }\n  }, []);\n\n  async function fetchCurrentUser(token: string) {\n    try {\n      const response = await fetch(\"/api/auth/me\", {\n        headers: {\n          \"Authorization\": `Bearer ${token}`,\n        },\n      });\n\n      if (response.ok) {\n        const userData = await response.json();\n        setUser(userData);\n      } else {\n        // Token is invalid, try to refresh\n        await refreshAccessToken();\n      }\n    } catch (error) {\n      console.error(\"Failed to fetch user:\", error);\n      localStorage.removeItem(\"accessToken\");\n      localStorage.removeItem(\"refreshToken\");\n      setAccessToken(null);\n      setUser(null);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  async function refreshAccessToken() {\n    const refreshToken = localStorage.getItem(\"refreshToken\");\n    \n    if (!refreshToken) {\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      const response = await fetch(\"/api/auth/refresh\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ refreshToken }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        localStorage.setItem(\"accessToken\", data.accessToken);\n        setAccessToken(data.accessToken);\n        await fetchCurrentUser(data.accessToken);\n      } else {\n        localStorage.removeItem(\"accessToken\");\n        localStorage.removeItem(\"refreshToken\");\n        setAccessToken(null);\n        setUser(null);\n      }\n    } catch (error) {\n      console.error(\"Token refresh failed:\", error);\n      localStorage.removeItem(\"accessToken\");\n      localStorage.removeItem(\"refreshToken\");\n      setAccessToken(null);\n      setUser(null);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  async function login(email: string, password: string) {\n    const response = await fetch(\"/api/auth/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ email, password }),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || \"Login failed\");\n    }\n\n    const data = await response.json();\n    localStorage.setItem(\"accessToken\", data.accessToken);\n    localStorage.setItem(\"refreshToken\", data.refreshToken);\n    setAccessToken(data.accessToken);\n    setUser(data.user);\n  }\n\n  async function register(email: string, password: string, fullName: string, username: string) {\n    const response = await fetch(\"/api/auth/register\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ email, password, fullName, username }),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || \"Registration failed\");\n    }\n\n    const data = await response.json();\n    localStorage.setItem(\"accessToken\", data.accessToken);\n    localStorage.setItem(\"refreshToken\", data.refreshToken);\n    setAccessToken(data.accessToken);\n    setUser(data.user);\n  }\n\n  async function logout() {\n    const refreshToken = localStorage.getItem(\"refreshToken\");\n    \n    if (refreshToken && accessToken) {\n      try {\n        await fetch(\"/api/auth/logout\", {\n          method: \"POST\",\n          headers: {\n            \"Authorization\": `Bearer ${accessToken}`,\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ refreshToken }),\n        });\n      } catch (error) {\n        console.error(\"Logout request failed:\", error);\n      }\n    }\n\n    localStorage.removeItem(\"accessToken\");\n    localStorage.removeItem(\"refreshToken\");\n    setAccessToken(null);\n    setUser(null);\n  }\n\n  return (\n    <AuthContext.Provider value={{ user, accessToken, login, register, logout, isLoading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":5117},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport * as schema from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\nimport bcrypt from \"bcrypt\";\n\nasync function seed() {\n  console.log(\"🌱 Seeding database...\");\n\n  // Create default tenant\n  console.log(\"Creating default tenant...\");\n  const [defaultTenant] = await db.insert(schema.tenants).values({\n    name: \"Default Organization\",\n    subdomain: \"default\",\n    isActive: true,\n  }).returning().onConflictDoNothing();\n\n  const tenantId = defaultTenant.id;\n\n  // Create default admin user\n  console.log(\"Creating default admin user...\");\n  const hashedPassword = await bcrypt.hash(\"admin123\", 10);\n  await db.insert(schema.users).values({\n    tenantId,\n    username: \"admin\",\n    password: hashedPassword,\n    fullName: \"System Administrator\",\n    email: \"admin@example.com\",\n    role: \"admin\",\n    isActive: true,\n  }).onConflictDoNothing();\n\n  // Seed Industries\n  const industries = [\n    { tenantId, name: \"Manufacturing\", description: \"Manufacturing and production facilities\" },\n    { tenantId, name: \"Healthcare\", description: \"Healthcare and medical facilities\" },\n    { tenantId, name: \"Retail\", description: \"Retail stores and shopping centers\" },\n    { tenantId, name: \"Food & Beverage\", description: \"Restaurants, cafes, and food processing\" },\n    { tenantId, name: \"Construction\", description: \"Construction sites and infrastructure\" },\n    { tenantId, name: \"Logistics\", description: \"Warehousing and distribution centers\" },\n    { tenantId, name: \"Education\", description: \"Schools, colleges, and training centers\" },\n    { tenantId, name: \"Hospitality\", description: \"Hotels, resorts, and accommodation\" },\n    { tenantId, name: \"Technology\", description: \"IT companies and data centers\" },\n    { tenantId, name: \"Agriculture\", description: \"Farms and agricultural facilities\" },\n  ];\n\n  console.log(\"Creating industries...\");\n  for (const industry of industries) {\n    await db.insert(schema.industries).values(industry).onConflictDoNothing();\n  }\n\n  // Seed Audit Types\n  const auditTypes = [\n    { tenantId, name: \"Safety Audit\", description: \"Comprehensive workplace safety inspection\" },\n    { tenantId, name: \"Quality Audit\", description: \"Product and process quality assessment\" },\n    { tenantId, name: \"Environmental Audit\", description: \"Environmental compliance and sustainability audit\" },\n    { tenantId, name: \"Compliance Audit\", description: \"Regulatory and legal compliance audit\" },\n    { tenantId, name: \"Financial Audit\", description: \"Financial controls and accounting audit\" },\n    { tenantId, name: \"Operational Audit\", description: \"Operational efficiency and process audit\" },\n    { tenantId, name: \"Security Audit\", description: \"Physical and information security audit\" },\n    { tenantId, name: \"Fire Safety Audit\", description: \"Fire safety systems and procedures audit\" },\n  ];\n\n  console.log(\"Creating audit types...\");\n  for (const auditType of auditTypes) {\n    await db.insert(schema.auditTypes).values(auditType).onConflictDoNothing();\n  }\n\n  // Get the first audit type for sample checklist\n  const [safetyAuditType] = await db.select().from(schema.auditTypes).where(\n    eq(schema.auditTypes.name, \"Safety Audit\")\n  ).limit(1);\n\n  if (safetyAuditType) {\n    console.log(\"Creating sample checklist...\");\n    \n    // Create a sample Safety Audit checklist\n    const [checklist] = await db.insert(schema.checklists).values({\n      tenantId,\n      name: \"General Safety Audit Checklist\",\n      auditTypeId: safetyAuditType.id,\n      isActive: true,\n    }).returning();\n\n    if (checklist) {\n      console.log(\"Creating checklist items...\");\n      \n      // Sample checklist items\n      const checklistItems = [\n        { checklistId: checklist.id, question: \"Are fire extinguishers properly located and accessible?\", category: \"Fire Safety\", orderIndex: 1 },\n        { checklistId: checklist.id, question: \"Are emergency exits clearly marked and unobstructed?\", category: \"Fire Safety\", orderIndex: 2 },\n        { checklistId: checklist.id, question: \"Are employees wearing appropriate PPE?\", category: \"Personal Safety\", orderIndex: 3 },\n        { checklistId: checklist.id, question: \"Are work areas clean and free from hazards?\", category: \"Housekeeping\", orderIndex: 4 },\n        { checklistId: checklist.id, question: \"Are safety signs and labels clearly visible?\", category: \"Signage\", orderIndex: 5 },\n        { checklistId: checklist.id, question: \"Are electrical panels properly covered and labeled?\", category: \"Electrical Safety\", orderIndex: 6 },\n        { checklistId: checklist.id, question: \"Are chemical storage areas properly ventilated?\", category: \"Chemical Safety\", orderIndex: 7 },\n        { checklistId: checklist.id, question: \"Are machinery guards in place and functioning?\", category: \"Machine Safety\", orderIndex: 8 },\n        { checklistId: checklist.id, question: \"Is first aid equipment readily available?\", category: \"Emergency Preparedness\", orderIndex: 9 },\n        { checklistId: checklist.id, question: \"Are safety procedures documented and accessible?\", category: \"Documentation\", orderIndex: 10 },\n      ];\n\n      for (const item of checklistItems) {\n        await db.insert(schema.checklistItems).values(item);\n      }\n    }\n  }\n\n  // Get Quality Audit type for another sample checklist\n  const [qualityAuditType] = await db.select().from(schema.auditTypes).where(\n    eq(schema.auditTypes.name, \"Quality Audit\")\n  ).limit(1);\n\n  if (qualityAuditType) {\n    console.log(\"Creating quality audit checklist...\");\n    \n    const [qualityChecklist] = await db.insert(schema.checklists).values({\n      tenantId,\n      name: \"ISO 9001 Quality Management Checklist\",\n      auditTypeId: qualityAuditType.id,\n      isActive: true,\n    }).returning();\n\n    if (qualityChecklist) {\n      const qualityItems = [\n        { checklistId: qualityChecklist.id, question: \"Are quality objectives documented and measurable?\", category: \"Quality Planning\", orderIndex: 1 },\n        { checklistId: qualityChecklist.id, question: \"Is there a documented quality management system?\", category: \"Documentation\", orderIndex: 2 },\n        { checklistId: qualityChecklist.id, question: \"Are quality records maintained and accessible?\", category: \"Record Keeping\", orderIndex: 3 },\n        { checklistId: qualityChecklist.id, question: \"Are inspection procedures followed consistently?\", category: \"Quality Control\", orderIndex: 4 },\n        { checklistId: qualityChecklist.id, question: \"Is there a process for handling non-conforming products?\", category: \"Non-Conformance\", orderIndex: 5 },\n        { checklistId: qualityChecklist.id, question: \"Are customer complaints tracked and resolved?\", category: \"Customer Satisfaction\", orderIndex: 6 },\n        { checklistId: qualityChecklist.id, question: \"Is corrective action process effective?\", category: \"Continuous Improvement\", orderIndex: 7 },\n        { checklistId: qualityChecklist.id, question: \"Are suppliers evaluated and monitored?\", category: \"Supplier Management\", orderIndex: 8 },\n      ];\n\n      for (const item of qualityItems) {\n        await db.insert(schema.checklistItems).values(item);\n      }\n    }\n  }\n\n  console.log(\"✅ Database seeded successfully!\");\n  console.log(\"📝 Default admin credentials:\");\n  console.log(\"   Email: admin@example.com\");\n  console.log(\"   Password: admin123\");\n}\n\nseed().catch((error) => {\n  console.error(\"❌ Seeding failed:\", error);\n  process.exit(1);\n});\n","size_bytes":7459},"client/src/pages/Register.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/lib/authContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Building2, Lock, Mail, User } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Register() {\n  const [, setLocation] = useLocation();\n  const { register } = useAuth();\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    username: \"\",\n    email: \"\",\n    fullName: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleRegister = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (formData.password !== formData.confirmPassword) {\n      toast({\n        title: \"Error\",\n        description: \"Passwords do not match\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (formData.password.length < 6) {\n      toast({\n        title: \"Error\",\n        description: \"Password must be at least 6 characters\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      await register(formData.email, formData.password, formData.fullName, formData.username);\n      toast({\n        title: \"Success\",\n        description: \"Account created successfully\",\n      });\n      setLocation(\"/\");\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Registration failed\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex\">\n      {/* Left Side - Register Form */}\n      <div className=\"flex-1 flex items-center justify-center p-8 bg-background\">\n        <div className=\"w-full max-w-md space-y-6\">\n          <div className=\"flex items-center gap-3 mb-8\">\n            <div className=\"h-12 w-12 rounded-lg bg-primary flex items-center justify-center\">\n              <Building2 className=\"h-7 w-7 text-primary-foreground\" />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-bold\">Audit Flow Pro</h1>\n              <p className=\"text-sm text-muted-foreground\">Audit Platform</p>\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <h2 className=\"text-2xl font-semibold\">Create your account</h2>\n            <p className=\"text-muted-foreground\">\n              Get started with your audit and lead management platform\n            </p>\n          </div>\n\n          <form onSubmit={handleRegister} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\">Username</Label>\n              <div className=\"relative\">\n                <User className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  id=\"username\"\n                  type=\"text\"\n                  placeholder=\"johndoe\"\n                  className=\"pl-10\"\n                  value={formData.username}\n                  onChange={(e) => setFormData({ ...formData, username: e.target.value })}\n                  required\n                  data-testid=\"input-username\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"fullName\">Full Name</Label>\n              <div className=\"relative\">\n                <User className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  id=\"fullName\"\n                  type=\"text\"\n                  placeholder=\"John Doe\"\n                  className=\"pl-10\"\n                  value={formData.fullName}\n                  onChange={(e) => setFormData({ ...formData, fullName: e.target.value })}\n                  required\n                  data-testid=\"input-fullname\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"john@example.com\"\n                  className=\"pl-10\"\n                  value={formData.email}\n                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                  required\n                  data-testid=\"input-email\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  placeholder=\"••••••••\"\n                  className=\"pl-10\"\n                  value={formData.password}\n                  onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n                  required\n                  data-testid=\"input-password\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  id=\"confirmPassword\"\n                  type=\"password\"\n                  placeholder=\"••••••••\"\n                  className=\"pl-10\"\n                  value={formData.confirmPassword}\n                  onChange={(e) => setFormData({ ...formData, confirmPassword: e.target.value })}\n                  required\n                  data-testid=\"input-confirm-password\"\n                />\n              </div>\n            </div>\n\n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={isLoading} \n              data-testid=\"button-register\"\n            >\n              {isLoading ? \"Creating account...\" : \"Create Account\"}\n            </Button>\n\n            <div className=\"text-center text-sm text-muted-foreground\">\n              <button\n                type=\"button\"\n                className=\"text-primary hover:underline\"\n                onClick={() => setLocation(\"/login\")}\n                data-testid=\"link-login\"\n              >\n                Already have an account? Sign in\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n\n      {/* Right Side - Illustration */}\n      <div className=\"hidden lg:flex flex-1 bg-primary/5 items-center justify-center p-8\">\n        <div className=\"max-w-md space-y-6 text-center\">\n          <div className=\"mx-auto w-64 h-64 rounded-2xl bg-primary/10 flex items-center justify-center\">\n            <div className=\"space-y-4\">\n              <div className=\"h-16 w-16 mx-auto rounded-lg bg-primary/20 flex items-center justify-center\">\n                <Building2 className=\"h-8 w-8 text-primary\" />\n              </div>\n              <div className=\"space-y-2\">\n                <div className=\"h-3 w-48 bg-primary/20 rounded mx-auto\" />\n                <div className=\"h-3 w-32 bg-primary/10 rounded mx-auto\" />\n                <div className=\"h-3 w-40 bg-primary/10 rounded mx-auto\" />\n              </div>\n            </div>\n          </div>\n          <div className=\"space-y-2\">\n            <h3 className=\"text-xl font-semibold\">Join Our Platform</h3>\n            <p className=\"text-muted-foreground\">\n              Start managing your audits and leads with our comprehensive platform. Multi-tenant, secure, and feature-rich.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8160},"client/src/components/CreateAuditDialog.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/lib/authContext\";\nimport type { Industry, AuditType } from \"@shared/schema\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\nconst auditFormSchema = z.object({\n  auditNumber: z.string().min(1, \"Audit number is required\"),\n  customerId: z.string().min(1, \"Customer ID is required\"),\n  customerName: z.string().min(1, \"Customer name is required\"),\n  siteLocation: z.string().min(1, \"Site location is required\"),\n  industryId: z.string().optional(),\n  auditTypeId: z.string().optional(),\n  auditorName: z.string().min(1, \"Auditor name is required\"),\n  auditDate: z.string().min(1, \"Audit date is required\"),\n  geoLocation: z.string().optional(),\n});\n\ntype AuditFormData = z.infer<typeof auditFormSchema>;\n\ninterface CreateAuditDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function CreateAuditDialog({ open, onOpenChange }: CreateAuditDialogProps) {\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  const { data: industries = [] } = useQuery<Industry[]>({\n    queryKey: [\"/api/industries\"],\n  });\n\n  const { data: auditTypes = [] } = useQuery<AuditType[]>({\n    queryKey: [\"/api/audit-types\"],\n  });\n\n  const form = useForm<AuditFormData>({\n    resolver: zodResolver(auditFormSchema),\n    defaultValues: {\n      auditNumber: `AUD-${Date.now()}`,\n      customerId: \"\",\n      customerName: \"\",\n      siteLocation: \"\",\n      industryId: \"\",\n      auditTypeId: \"\",\n      auditorName: user?.fullName || \"\",\n      auditDate: new Date().toISOString().split(\"T\")[0],\n      geoLocation: \"\",\n    },\n  });\n\n  const createAuditMutation = useMutation({\n    mutationFn: (data: AuditFormData) => {\n      // Convert auditDate string to ISO timestamp\n      const auditPayload = {\n        ...data,\n        auditDate: new Date(data.auditDate).toISOString(),\n        auditorId: user?.id || null,\n        industryId: data.industryId || null,\n        auditTypeId: data.auditTypeId || null,\n      };\n      return apiRequest(\"POST\", \"/api/audits\", auditPayload);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/audits\"] });\n      toast({\n        title: \"Success\",\n        description: \"Audit created successfully\",\n      });\n      form.reset();\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create audit\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: AuditFormData) => {\n    createAuditMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"dialog-create-audit\">\n        <DialogHeader>\n          <DialogTitle>Create New Audit</DialogTitle>\n          <DialogDescription>\n            Enter the audit details below\n          </DialogDescription>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"auditNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Audit Number</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-audit-number\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"auditDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Audit Date</FormLabel>\n                    <FormControl>\n                      <Input type=\"date\" {...field} data-testid=\"input-audit-date\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"customerName\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Customer Name</FormLabel>\n                  <FormControl>\n                    <Input {...field} placeholder=\"Enter customer name\" data-testid=\"input-customer-name\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"customerId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Customer ID</FormLabel>\n                  <FormControl>\n                    <Input {...field} placeholder=\"Enter customer ID\" data-testid=\"input-customer-id\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"siteLocation\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Site Location</FormLabel>\n                  <FormControl>\n                    <Input {...field} placeholder=\"Enter site location\" data-testid=\"input-site-location\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"auditorName\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Auditor Name</FormLabel>\n                  <FormControl>\n                    <Input {...field} placeholder=\"Enter auditor name\" data-testid=\"input-auditor-name\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"industryId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Industry Type (Optional)</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-industry\">\n                          <SelectValue placeholder=\"Select industry\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {industries.map((industry) => (\n                          <SelectItem key={industry.id} value={industry.id}>\n                            {industry.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"auditTypeId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Audit Type (Optional)</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-audit-type\">\n                          <SelectValue placeholder=\"Select audit type\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {auditTypes.map((type) => (\n                          <SelectItem key={type.id} value={type.id}>\n                            {type.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"geoLocation\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Geo-Location (Optional)</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      {...field} \n                      placeholder=\"Enter geo-location coordinates or address\" \n                      data-testid=\"input-geo-location\"\n                      rows={2}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end gap-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel-audit\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createAuditMutation.isPending}\n                data-testid=\"button-submit-audit\"\n              >\n                {createAuditMutation.isPending ? \"Creating...\" : \"Create Audit\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":10162},"client/src/components/CreateLeadDialog.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Industry } from \"@shared/schema\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\nconst leadFormSchema = z.object({\n  leadNumber: z.string().min(1, \"Lead number is required\"),\n  companyName: z.string().min(1, \"Company name is required\"),\n  contactPerson: z.string().min(1, \"Contact person is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  phone: z.string().min(1, \"Phone number is required\"),\n  industryId: z.string().optional(),\n  priority: z.enum([\"low\", \"medium\", \"high\", \"urgent\"]).default(\"medium\"),\n  estimatedValue: z.string().optional(),\n  notes: z.string().optional(),\n});\n\ntype LeadFormData = z.infer<typeof leadFormSchema>;\n\ninterface CreateLeadDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function CreateLeadDialog({ open, onOpenChange }: CreateLeadDialogProps) {\n  const { toast } = useToast();\n\n  const { data: industries = [] } = useQuery<Industry[]>({\n    queryKey: [\"/api/industries\"],\n  });\n\n  const form = useForm<LeadFormData>({\n    resolver: zodResolver(leadFormSchema),\n    defaultValues: {\n      leadNumber: `LEAD-${Date.now()}`,\n      companyName: \"\",\n      contactPerson: \"\",\n      email: \"\",\n      phone: \"\",\n      industryId: \"\",\n      priority: \"medium\",\n      estimatedValue: \"\",\n      notes: \"\",\n    },\n  });\n\n  const createLeadMutation = useMutation({\n    mutationFn: (data: LeadFormData) => {\n      const leadPayload = {\n        ...data,\n        estimatedValue: data.estimatedValue ? parseInt(data.estimatedValue) : null,\n        industryId: data.industryId || null,\n        auditId: null,\n        assignedTo: null,\n      };\n      return apiRequest(\"POST\", \"/api/leads\", leadPayload);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n      toast({\n        title: \"Success\",\n        description: \"Lead created successfully\",\n      });\n      form.reset();\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create lead\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: LeadFormData) => {\n    createLeadMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"dialog-create-lead\">\n        <DialogHeader>\n          <DialogTitle>Create New Lead</DialogTitle>\n          <DialogDescription>\n            Enter the lead details below\n          </DialogDescription>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"leadNumber\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Lead Number</FormLabel>\n                  <FormControl>\n                    <Input {...field} data-testid=\"input-lead-number\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"companyName\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Company Name</FormLabel>\n                  <FormControl>\n                    <Input {...field} placeholder=\"Enter company name\" data-testid=\"input-company-name\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"contactPerson\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Contact Person</FormLabel>\n                  <FormControl>\n                    <Input {...field} placeholder=\"Enter contact person name\" data-testid=\"input-contact-person\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input {...field} type=\"email\" placeholder=\"email@example.com\" data-testid=\"input-email\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"phone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Phone</FormLabel>\n                    <FormControl>\n                      <Input {...field} placeholder=\"+1 234 567 8900\" data-testid=\"input-phone\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"industryId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Industry (Optional)</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-industry\">\n                          <SelectValue placeholder=\"Select industry\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {industries.map((industry) => (\n                          <SelectItem key={industry.id} value={industry.id}>\n                            {industry.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"priority\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Priority</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-priority\">\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"low\">Low</SelectItem>\n                        <SelectItem value=\"medium\">Medium</SelectItem>\n                        <SelectItem value=\"high\">High</SelectItem>\n                        <SelectItem value=\"urgent\">Urgent</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"estimatedValue\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Estimated Value (Optional)</FormLabel>\n                  <FormControl>\n                    <Input \n                      {...field} \n                      type=\"number\" \n                      placeholder=\"Enter estimated value\" \n                      data-testid=\"input-estimated-value\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"notes\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Notes (Optional)</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      {...field} \n                      placeholder=\"Add any additional notes about this lead\" \n                      data-testid=\"input-notes\"\n                      rows={3}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end gap-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel-lead\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createLeadMutation.isPending}\n                data-testid=\"button-submit-lead\"\n              >\n                {createLeadMutation.isPending ? \"Creating...\" : \"Create Lead\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9942},"client/src/components/AuditDetailDialog.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { CheckCircle, XCircle, Archive, Send } from \"lucide-react\";\nimport type { Audit } from \"@shared/schema\";\nimport { format } from \"date-fns\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/lib/authContext\";\n\ninterface AuditDetailDialogProps {\n  audit: Audit | null;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function AuditDetailDialog({ audit, open, onOpenChange }: AuditDetailDialogProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  const submitForReviewMutation = useMutation({\n    mutationFn: (auditId: string) => apiRequest(\"POST\", `/api/audits/${auditId}/submit-for-review`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/audits\"] });\n      toast({ title: \"Success\", description: \"Audit submitted for review\" });\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message || \"Failed to submit audit\", variant: \"destructive\" });\n    },\n  });\n\n  const approveMutation = useMutation({\n    mutationFn: (auditId: string) => apiRequest(\"POST\", `/api/audits/${auditId}/approve`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/audits\"] });\n      toast({ title: \"Success\", description: \"Audit approved\" });\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message || \"Failed to approve audit\", variant: \"destructive\" });\n    },\n  });\n\n  const rejectMutation = useMutation({\n    mutationFn: (auditId: string) => apiRequest(\"POST\", `/api/audits/${auditId}/reject`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/audits\"] });\n      toast({ title: \"Success\", description: \"Audit rejected and returned to draft\" });\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message || \"Failed to reject audit\", variant: \"destructive\" });\n    },\n  });\n\n  const closeMutation = useMutation({\n    mutationFn: (auditId: string) => apiRequest(\"POST\", `/api/audits/${auditId}/close`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/audits\"] });\n      toast({ title: \"Success\", description: \"Audit closed\" });\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message || \"Failed to close audit\", variant: \"destructive\" });\n    },\n  });\n\n  if (!audit) return null;\n\n  const getStatusVariant = (status: string) => {\n    switch (status) {\n      case \"approved\":\n        return \"default\";\n      case \"review\":\n        return \"secondary\";\n      case \"draft\":\n        return \"outline\";\n      case \"closed\":\n        return \"outline\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  const formatStatus = (status: string) => {\n    return status.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n  };\n\n  const canSubmitForReview = audit.status === 'draft';\n  const canApprove = (user?.role === 'admin' || user?.role === 'master_admin') && audit.status === 'review';\n  const canReject = (user?.role === 'admin' || user?.role === 'master_admin') && audit.status === 'review';\n  const canClose = (user?.role === 'admin' || user?.role === 'master_admin') && audit.status === 'approved';\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl\" data-testid=\"dialog-audit-detail\">\n        <DialogHeader>\n          <div className=\"flex items-center justify-between gap-4\">\n            <div className=\"flex-1 min-w-0\">\n              <DialogTitle data-testid=\"text-audit-detail-id\">{audit.auditNumber}</DialogTitle>\n              <DialogDescription data-testid=\"text-audit-detail-customer\">\n                {audit.customerName}\n              </DialogDescription>\n            </div>\n            <Badge variant={getStatusVariant(audit.status)} data-testid=\"badge-audit-detail-status\">\n              {formatStatus(audit.status)}\n            </Badge>\n          </div>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">Location</p>\n              <p className=\"mt-1\" data-testid=\"text-audit-detail-location\">{audit.siteLocation}</p>\n            </div>\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">Date</p>\n              <p className=\"mt-1\" data-testid=\"text-audit-detail-date\">\n                {format(new Date(audit.auditDate), \"MMMM dd, yyyy\")}\n              </p>\n            </div>\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">Auditor</p>\n              <p className=\"mt-1\" data-testid=\"text-audit-detail-auditor\">{audit.auditorName}</p>\n            </div>\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">Industry</p>\n              <p className=\"mt-1\" data-testid=\"text-audit-detail-industry\">{audit.industry?.name || 'N/A'}</p>\n            </div>\n            <div className=\"col-span-2\">\n              <p className=\"text-sm font-medium text-muted-foreground\">Audit Type</p>\n              <p className=\"mt-1\" data-testid=\"text-audit-detail-audit-type\">{audit.auditType?.name || 'N/A'}</p>\n            </div>\n          </div>\n\n          <Separator />\n\n          <div className=\"flex flex-wrap gap-2\">\n            {canSubmitForReview && (\n              <Button \n                variant=\"outline\" \n                onClick={() => submitForReviewMutation.mutate(audit.id)}\n                disabled={submitForReviewMutation.isPending}\n                data-testid=\"button-submit-for-review\"\n              >\n                <Send className=\"h-4 w-4 mr-2\" />\n                Submit for Review\n              </Button>\n            )}\n            {canApprove && (\n              <Button \n                variant=\"outline\" \n                onClick={() => approveMutation.mutate(audit.id)}\n                disabled={approveMutation.isPending}\n                data-testid=\"button-approve\"\n              >\n                <CheckCircle className=\"h-4 w-4 mr-2\" />\n                Approve\n              </Button>\n            )}\n            {canReject && (\n              <Button \n                variant=\"outline\" \n                onClick={() => rejectMutation.mutate(audit.id)}\n                disabled={rejectMutation.isPending}\n                data-testid=\"button-reject\"\n              >\n                <XCircle className=\"h-4 w-4 mr-2\" />\n                Reject\n              </Button>\n            )}\n            {canClose && (\n              <Button \n                variant=\"outline\" \n                onClick={() => closeMutation.mutate(audit.id)}\n                disabled={closeMutation.isPending}\n                data-testid=\"button-close\"\n              >\n                <Archive className=\"h-4 w-4 mr-2\" />\n                Close\n              </Button>\n            )}\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7505},"client/src/components/RoleGuard.tsx":{"content":"import { useAuth } from \"@/lib/authContext\";\nimport { Redirect } from \"wouter\";\nimport type { UserRole } from \"@shared/schema\";\n\ninterface RoleGuardProps {\n  allowedRoles: UserRole[];\n  children: React.ReactNode;\n  fallbackPath?: string;\n}\n\nexport function RoleGuard({ allowedRoles, children, fallbackPath = \"/\" }: RoleGuardProps) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <p className=\"text-muted-foreground\">Loading...</p>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  if (!allowedRoles.includes(user.role as UserRole)) {\n    return <Redirect to={fallbackPath} />;\n  }\n\n  return <>{children}</>;\n}\n","size_bytes":750}},"version":2}